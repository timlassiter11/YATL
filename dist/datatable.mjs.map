{"version":3,"sources":["../src/virtualScroll.ts","../src/utils.ts","../src/datatable.ts","../src/plugins/localStorageAdapter.ts"],"sourcesContent":["const MAX_ELEMENT_HEIGHT = 33554400;\r\n\r\nexport class VirtualScroll {\r\n  static #warned = false;\r\n  \r\n  #container;\r\n  #element;\r\n  #generator;\r\n  #rowCount = 0;\r\n  #rowHeight = 0;\r\n  #padding = 2;\r\n  #animationFrame = 0;\r\n  #started = false;\r\n  #scrollTop = 0;\r\n\r\n  constructor({ container, element, generator, nodePadding = 2 }: VirtualScrollOptions) {\r\n    this.#container = container;\r\n    this.#element = element;\r\n    this.#generator = generator;\r\n    this.#padding = nodePadding;\r\n  }\r\n\r\n  get rowCount() {\r\n    return this.#rowCount;\r\n  }\r\n\r\n  set rowCount(count) {\r\n    this.#rowCount = count;\r\n    this.#renderChunk();\r\n  }\r\n\r\n  get rowHeight() {\r\n    if (!this.#rowHeight) {\r\n      this.#updateRowHeight();\r\n    }\r\n    return this.#rowHeight;\r\n  }\r\n\r\n  get started() {\r\n    return this.#started;\r\n  }\r\n\r\n  /*\r\n    * Scroll to a specific index in the virtual scroll.\r\n    * @param index The index to scroll to.\r\n    * @throws RangeError if the index is out of bounds.\r\n  */\r\n  scrollTo(index: number) {\r\n    if (index < 0 || index >= this.#rowCount) {\r\n      throw new RangeError(\"Index out of bounds.\");\r\n    }\r\n    this.#container.scrollTop = this.rowHeight * index;\r\n    this.#renderChunk();\r\n  }\r\n\r\n  #scrollCallback = () => {\r\n    // Only update if we are vertically scrolling.\r\n    // Fixes horizontal scroll bug.\r\n    if (this.#container.scrollTop !== this.#scrollTop) {\r\n      this.#scrollTop = this.#container.scrollTop;\r\n      if (this.#animationFrame) {\r\n        cancelAnimationFrame(this.#animationFrame);\r\n      }\r\n      this.#animationFrame = requestAnimationFrame(() => this.#renderChunk());\r\n    }\r\n  };\r\n\r\n  #renderCallback = () => {\r\n    this.#renderChunk();\r\n  };\r\n\r\n  start() {\r\n    if (this.#started) return;\r\n    this.#started = true;\r\n\r\n    this.#container.addEventListener(\"scroll\", this.#scrollCallback);\r\n    window.addEventListener(\"resize\", this.#renderCallback);\r\n\r\n    this.#renderChunk();\r\n  }\r\n\r\n  stop() {\r\n    if (this.#animationFrame) {\r\n      cancelAnimationFrame(this.#animationFrame);\r\n    }\r\n\r\n    this.#container.removeEventListener(\"scroll\", this.#scrollCallback);\r\n    window.removeEventListener(\"resize\", this.#renderCallback);\r\n    this.#started = false;\r\n  }\r\n\r\n  #renderChunk() {\r\n    const scrollTop = this.#container.scrollTop;\r\n    const rowCount = this.rowCount;\r\n    const rowHeight = this.rowHeight;\r\n    const padding = this.#padding;\r\n    const totalContentHeight = rowHeight * rowCount;\r\n    // Max out the element height so we can get a real height of the container.\r\n    // This fixes an issue when the parent isn't set to grow causing only a\r\n    // small number of rows to render until you scroll.\r\n    this.#element.innerHTML = `<tr style=\"height: ${totalContentHeight}px;\"></tr>`;\r\n    const actualHeight = this.#element.offsetHeight;\r\n    const viewHeight = this.#container.offsetHeight;\r\n\r\n    if (!VirtualScroll.#warned && actualHeight < Math.round(totalContentHeight - 1)) {\r\n      VirtualScroll.#warned = true;\r\n      console.error(\"Max element height exceeded. Virtual scroll may not work.\");\r\n    }\r\n\r\n    if (!rowCount || !rowHeight) {\r\n      return;\r\n    }\r\n\r\n    let startNode = Math.floor(scrollTop / rowHeight) - padding;\r\n    startNode = Math.max(0, startNode);\r\n\r\n    let visibleNodesCount = Math.ceil(viewHeight / rowHeight) + 2 * padding;\r\n    visibleNodesCount = Math.min(rowCount - startNode, visibleNodesCount);\r\n\r\n    const offsetY = startNode * rowHeight;\r\n    const remainingHeight =\r\n      totalContentHeight - (offsetY + visibleNodesCount * rowHeight);\r\n\r\n    try {\r\n      this.#element.innerHTML = \"\";\r\n      const visibleChildren = new Array(visibleNodesCount)\r\n        .fill(null)\r\n        .map((_, index) => this.#generator(index + startNode));\r\n      // We create two empty rows. One at the top and one at the bottom.\r\n      // Resize the rows accordingly to move the rendered rows to where we want.\r\n      let topRow = document.createElement(\"tr\");\r\n      let bottomRow = document.createElement(\"tr\");\r\n      topRow.style.height = offsetY + \"px\";\r\n      bottomRow.style.height = remainingHeight + \"px\";\r\n      this.#element.append(topRow);\r\n      this.#element.append(...visibleChildren);\r\n      this.#element.append(bottomRow);\r\n    } catch (e) {\r\n      if (e instanceof RangeError) {\r\n        console.log(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  #updateRowHeight() {\r\n    if (this.#rowCount === 0) {\r\n      this.#rowHeight = 0;\r\n      return;\r\n    }\r\n\r\n    const renderSize = Math.min(1000, this.#rowCount);\r\n    // Create an average row height by rendering the first N rows.\r\n    const elements = [];\r\n    for (let i = 0; i < renderSize; ++i) {\r\n      elements.push(this.#generator(i));\r\n    }\r\n    this.#element.innerHTML = \"\";\r\n    this.#element.append(...elements);\r\n    this.#rowHeight = this.#element.offsetHeight / renderSize;\r\n\r\n    if (this.#rowHeight <= 0) {\r\n      throw new VirtualScrollError(\r\n        \"First 1000 rows had no rendered height. Virtual scroll can't be used.\"\r\n      );\r\n    } else if (this.#rowHeight * this.#rowCount > MAX_ELEMENT_HEIGHT) {\r\n      // This seems to be Chrome's max height of an element based on some random testing.\r\n      console.warn(\r\n        \"Virtual scroll height exceeded maximum known element height.\"\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport class VirtualScrollError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n  }\r\n}\r\n\r\nexport interface VirtualScrollOptions {\r\n  container: HTMLElement;\r\n  element: HTMLElement;\r\n  generator: (index: number) => HTMLElement;\r\n  nodePadding?: number;\r\n}","export const classesToArray = (classes: string[] | string | undefined) => {\r\n  if (typeof classes === \"string\" && classes !== \"\") {\r\n    return classes.split(\" \");\r\n  } else if (Array.isArray(classes)) {\r\n    return classes;\r\n  } else if (!classes) {\r\n    return [];\r\n  }\r\n  throw new TypeError(\"classes must be string or array of strings\");\r\n};\r\n\r\n/*\r\n  * Converts a string to a human-readable format.\r\n  * - Replaces underscores with spaces\r\n  * - Inserts spaces before uppercase letters (for camelCase)\r\n  * - Capitalizes the first letter of each word\r\n  *\r\n  * @param {string} str - The input string to convert.\r\n  * @returns {string} - The converted human-readable string.\r\n  */\r\nexport const toHumanReadable = (str: string) => {\r\n  return str\r\n    // Replace underscores with spaces\r\n    .replace(/_/g, \" \")\r\n    // Insert spaces before uppercase letters (for camelCase)\r\n    .replace(/([a-z])([A-Z])/g, \"$1 $2\")\r\n    // Capitalize the first letter of each word\r\n    .replace(/\\b\\w/g, (char) => char.toUpperCase());\r\n}\r\n\r\n/**\r\n * Tokenizes a string into an array of lowercase words separated by whitespace.\r\n */\r\nexport const whitespaceTokenizer = (value: any) =>\r\n    String(value)\r\n      .toLowerCase()\r\n      .replace(/[^\\w\\s]/g, \" \")\r\n      .trim()\r\n      .split(/\\s+/);","import './datatable.css';\r\n\r\nimport { VirtualScroll, VirtualScrollError } from './virtualScroll';\r\nimport { classesToArray, toHumanReadable, whitespaceTokenizer } from './utils';\r\nimport {\r\n  CellFormatterCallback,\r\n  ColumnFilterCallback,\r\n  ColumnOptions,\r\n  ColumnState,\r\n  ComparatorCallback,\r\n  FilterCallback,\r\n  Row,\r\n  RowFormatterCallback,\r\n  SortOrder,\r\n  SortValueCallback,\r\n  TableClasses,\r\n  TableOptions,\r\n  TokenizerCallback,\r\n  ValueFormatterCallback\r\n} from './types';\r\n\r\n/**\r\n * Class for creating a DataTable that will add sort, search, filter, and virtual scroll to a table.\r\n */\r\nexport class DataTable {\r\n\r\n  static Events = {\r\n    ROW_CLICK: \"dt.row.click\",\r\n    ROWS_CHANGED: \"dt.rows.changed\",\r\n    COL_HIDE: \"dt.col.hide\",\r\n    COL_SHOW: \"dt.col.show\",\r\n    COL_SORT: \"dt.col.sort\",\r\n    COL_RESIZE: \"dt.col.resize\",\r\n    COL_REARRANGE: \"dt.col.rearrange\",\r\n  }\r\n\r\n  // Centralized default options for the DataTable.\r\n  // These are the base values used if not overridden by user-provided options.\r\n  private static readonly DEFAULT_OPTIONS: Required<Omit<TableOptions, 'columns' | 'data' | 'rowFormatter'>> = {\r\n    virtualScroll: true,\r\n    highlightSearch: true,\r\n    sortable: true,\r\n    searchable: false,\r\n    tokenize: false,\r\n    resizable: true,\r\n    rearrangeable: true,\r\n    extraSearchFields: [],\r\n    noDataText: \"No records found\",\r\n    noMatchText: \"No matching records found\",\r\n    classes: {\r\n      scroller: \"dt-scroller\",\r\n      thead: \"dt-headers\",\r\n      tbody: \"\",\r\n      tfoot: \"\",\r\n      tr: \"\",\r\n      th: \"\",\r\n      td: \"\",\r\n    },\r\n    tokenizer: whitespaceTokenizer, // Default tokenizer function\r\n  };\r\n\r\n  // Table elements\r\n  #table!: HTMLTableElement;\r\n  #thead!: HTMLElement;\r\n  #tbody!: HTMLElement;\r\n  #tfoot!: HTMLElement;\r\n  #scroller!: HTMLElement;\r\n\r\n  #columnData: { [key: string]: ColumnData } = {};\r\n\r\n  // Current data\r\n  #rows: RowData[] = [];\r\n  #filteredRows: RowData[] = [];\r\n\r\n  // Search and filter data\r\n  #query!: RegExp | string | null;\r\n  #filters!: Record<string, any> | FilterCallback;\r\n  // Search fields that are not columns.\r\n  #extraSearchFields: string[];\r\n\r\n  #rowFormatter?: RowFormatterCallback;\r\n  #virtualScroll?: VirtualScroll;\r\n  #highlightSearch: boolean;\r\n  #tokenizer: TokenizerCallback;\r\n  // The current sort priority. Incremented when a column is sorted.\r\n  #sortPriority: number = 0;\r\n  #noDataText: string;\r\n  #noMatchText: string;\r\n  #classes: TableClasses;\r\n  #resizingColumn: ColumnData | null = null;\r\n\r\n  /**\r\n   * @param  table - Selector or HTMLElement for the table.\r\n   * @param options - Options for the table.\r\n   */\r\n  constructor(table: string | HTMLTableElement, options: TableOptions = {}) {\r\n\r\n    const finalOptions = {\r\n      columns: [],\r\n      data: [],\r\n      ...DataTable.DEFAULT_OPTIONS,\r\n      ...options\r\n    };\r\n\r\n    if (typeof table === \"string\") {\r\n      const tableElement = document.querySelector(table);\r\n      if (!tableElement)\r\n        throw new SyntaxError(`Failed to find table using selector ${table}`);\r\n      this.#table = tableElement as HTMLTableElement;\r\n    } else {\r\n      this.#table = table;\r\n    }\r\n\r\n    if (!(this.#table instanceof HTMLTableElement)) {\r\n      throw new TypeError(`Invalid table element type. Must be HTMLTableElement`);\r\n    }\r\n\r\n    if (!Array.isArray(finalOptions.columns)) {\r\n      throw new TypeError(\"columns must be a list of columns\");\r\n    }\r\n\r\n    this.#tokenizer = finalOptions.tokenizer;\r\n\r\n    this.#highlightSearch = finalOptions.highlightSearch;\r\n    this.#extraSearchFields = finalOptions.extraSearchFields;\r\n    this.#noDataText = finalOptions.noDataText;\r\n    this.#noMatchText = finalOptions.noMatchText;\r\n    this.#classes = finalOptions.classes;\r\n\r\n    this.#rowFormatter = finalOptions.rowFormatter;\r\n\r\n    this.#table.classList.add(\"data-table\");\r\n\r\n    // Inner element that handles the virtual scroll.\r\n    this.#scroller = document.createElement(\"div\");\r\n    this.#scroller.classList.add(...classesToArray(this.#classes.scroller));\r\n    this.#scroller.style.overflow = \"auto\";\r\n    this.#scroller.style.height = \"100%\";\r\n\r\n    // If the user tries to provide a height, we will use that for the scroller.\r\n    if (this.#table.style.height !== \"\") {\r\n      this.#scroller.style.height = this.#table.style.height;\r\n      this.#table.style.height = \"\";\r\n    }\r\n\r\n    // Add the scroller before the table so when we move the\r\n    // table into the scroller it stays in the same place.\r\n    this.#table.parentElement?.insertBefore(this.#scroller, this.#table);\r\n    this.#scroller.append(this.#table);\r\n\r\n    if (this.#table.querySelectorAll(\"thead\").length > 1) {\r\n      console.warn(\"Multiple theads found in table. Using last one.\");\r\n    }\r\n\r\n    if (this.#table.querySelectorAll(\"tbody\").length > 1) {\r\n      console.warn(\"Multiple tbodys found in table. Using first one.\");\r\n    }\r\n\r\n    // Hopefully there isn't more than one header or body\r\n    // but if there is, use the last header and first body\r\n    // since that seems like it would make the most sense.\r\n    const thead = this.#table.querySelector(\"thead:last-of-type\");\r\n    if (thead) {\r\n      this.#thead = thead as HTMLTableElement;\r\n    } else {\r\n      this.#thead = document.createElement(\"thead\");\r\n      this.#table.insertBefore(this.#thead, this.#table.firstChild);\r\n    }\r\n\r\n    this.#thead.classList.add(...classesToArray(this.#classes.thead));\r\n\r\n    // Create the row for the thead if there isn't one\r\n    let headerRow = this.#thead.querySelector(\"tr:last-of-type\");\r\n    if (!headerRow) {\r\n      headerRow = document.createElement(\"tr\");\r\n      this.#thead.append(headerRow);\r\n    }\r\n\r\n    headerRow.classList.add(...classesToArray(this.#classes.tr));\r\n    // Remove any existing header cells\r\n    // TODO: Add ability to use HTML headers provided by the user.\r\n    headerRow.innerHTML = '';\r\n\r\n    const tbody = this.#table.querySelector(\"tbody:first-of-type\");\r\n    // Create the tbody if it doesn't exists\r\n    if (tbody) {\r\n      this.#tbody = tbody as HTMLTableElement;\r\n    } else {\r\n      this.#tbody = document.createElement(\"tbody\");\r\n      this.#table.append(this.#tbody);\r\n    }\r\n\r\n    this.#tbody.classList.add(...classesToArray(this.#classes.tbody));\r\n\r\n    this.#tbody.addEventListener(\"click\", (event) => {\r\n      let tr, td, field;\r\n      if (event.target instanceof HTMLTableCellElement) {\r\n        td = event.target;\r\n        tr = td.parentElement;\r\n        field = td.dataset.dtField;\r\n      } else if (event.target instanceof HTMLTableRowElement) {\r\n        tr = event.target;\r\n      }\r\n\r\n      if (tr) {\r\n        const index = parseInt(tr.dataset.dtIndex || \"\");\r\n        if (!isNaN(index)) {\r\n          const row = this.#filteredRows[index];\r\n\r\n          const event = new CustomEvent(DataTable.Events.ROW_CLICK, {\r\n            detail: {\r\n              row: row,\r\n              index: index,\r\n              field: field,\r\n            },\r\n            bubbles: true,\r\n            cancelable: true,\r\n          });\r\n          tr.dispatchEvent(event);\r\n        }\r\n      }\r\n    });\r\n\r\n    let colVisible = false;\r\n    // Initialize columns\r\n    for (const colOptions of finalOptions.columns) {\r\n      const colData: ColumnData = {\r\n        field: colOptions.field,\r\n        title: colOptions.title || toHumanReadable(colOptions.field),\r\n        element: document.createElement(\"th\"),\r\n        visible: colOptions.visible ?? true,\r\n        sortable: colOptions.sortable ?? finalOptions.sortable,\r\n        searchable: colOptions.searchable ?? finalOptions.searchable,\r\n        tokenize: colOptions.tokenize ?? finalOptions.tokenize,\r\n        sortOrder: colOptions.sortOrder ?? null,\r\n        sortPriority: colOptions.sortPriority ?? 0,\r\n        resizeStartWidth: null,\r\n        resizeStartX: null,\r\n        valueFormatter: colOptions.valueFormatter,\r\n        elementFormatter: colOptions.elementFormatter,\r\n        comparatorCallback: colOptions.sorter,\r\n        filterCallback: colOptions.filter,\r\n        sortValueCallback: colOptions.sortValue\r\n      };\r\n      this.#columnData[colOptions.field] = colData;\r\n\r\n      const th = colData.element;\r\n      th.classList.add(...classesToArray(this.#classes.th));\r\n      th.dataset.dtField = colOptions.field;\r\n\r\n      const nameElement = document.createElement(\"div\");\r\n      nameElement.classList.add(\"dt-header-name\");\r\n      nameElement.innerText = colOptions.title || toHumanReadable(colOptions.field);\r\n      th.innerHTML = '';\r\n      th.append(nameElement);\r\n      th.hidden = !colData.visible;\r\n\r\n      headerRow.append(th);\r\n\r\n      // We need at least one column visible\r\n      if (colData.visible) {\r\n        colVisible = true;\r\n      }\r\n\r\n      if (colData.sortable) {\r\n        th.classList.add(\"dt-sortable\");\r\n        // Add the event listener to the name element\r\n        // to prevent clicking on the resizer from sorting.\r\n        nameElement.addEventListener(\"click\", (event) => {\r\n          const target = event.target as HTMLElement;\r\n          const field = target.closest(\"th\")?.dataset.dtField;\r\n          if (!field) return;\r\n          const col = this.#columnData[field];\r\n          if (!col.sortOrder) {\r\n            this.sort(col.field, \"asc\");\r\n          } else if (col.sortOrder === \"asc\") {\r\n            this.sort(col.field, \"desc\");\r\n          } else if (col.sortOrder) {\r\n            this.sort(col.field, null);\r\n          }\r\n        });\r\n      }\r\n\r\n      if (colOptions.resizable ?? finalOptions.resizable) {\r\n        const resizer = document.createElement(\"div\");\r\n        resizer.classList.add(\"dt-resizer\");\r\n        resizer.addEventListener(\"mousedown\", this.#resizeColumnStart);\r\n        resizer.addEventListener(\"dblclick\", this.#resizeColumnDoubleClick);\r\n        th.append(resizer);\r\n      }\r\n\r\n      if (typeof colOptions.width === \"number\") {\r\n        th.style.width = colOptions.width + \"px\";\r\n      } else if (typeof colOptions.width === \"string\") {\r\n        th.style.width = colOptions.width;\r\n      }\r\n\r\n      if (finalOptions.rearrangeable) {\r\n        th.draggable = true;\r\n        th.addEventListener(\"dragstart\", this.#dragColumnStart);\r\n        th.addEventListener(\"dragenter\", this.#dragColumnEnter);\r\n        th.addEventListener(\"dragover\", this.#dragColumnOver);\r\n        th.addEventListener(\"dragleave\", this.#dragColumnLeave);\r\n        th.addEventListener(\"drop\", this.#dragColumnDrop);\r\n        th.addEventListener(\"dragend\", this.#dragColumnEnd);\r\n      }\r\n    }\r\n\r\n    if (Object.keys(this.#columnData).length === 0) {\r\n      console.warn(\"No columns found. At least one column is required.\");\r\n    } else if (!colVisible) {\r\n      console.warn(\"At least a single column must be visible. Showing the first column.\");\r\n      this.showColumn(Object.keys(this.#columnData)[0]);\r\n    }\r\n\r\n    this.virtualScroll = finalOptions.virtualScroll;\r\n    this.loadData(finalOptions.data);\r\n  }\r\n\r\n  /**\r\n   * Gets a list of the ColumnStates for all columns in the table\r\n   * Can be used to save / restore columns sates.\r\n   */\r\n  get columnStates(): ColumnState[] {\r\n    return Object.values(this.#columnData).map((col) => {\r\n      return {\r\n        field: col.field,\r\n        title: col.title,\r\n        visible: col.visible,\r\n        sortOrder: col.sortOrder,\r\n        sortPriority: col.sortPriority,\r\n        width: col.element.style.width,\r\n      } as ColumnState;\r\n    });\r\n  }\r\n\r\n  set columnStates(states: ColumnState[]) {\r\n    for (const state of states) {\r\n      const column = this.#columnData[state.field];\r\n      if (!column) {\r\n        console.warn(`Attempting to restore state for non-existent column ${state.field}`);\r\n        continue;\r\n      }\r\n\r\n      column.visible = state.visible ?? column.visible;\r\n      column.sortOrder = state.sortOrder ?? column.sortOrder;\r\n      column.sortPriority = state.sortPriority ?? column.sortPriority;\r\n      column.element.style.width = state.width ?? column.element.style.width;\r\n    }\r\n    this.refresh();\r\n  }\r\n\r\n  /**\r\n   * Get the current data in the table.\r\n   */\r\n  get rows() {\r\n    return this.#filteredRows;\r\n  }\r\n\r\n  /**\r\n   * Get total row count of visible data.\r\n   */\r\n  get length(): number {\r\n    return this.#filteredRows ? this.#filteredRows.length : 0;\r\n  }\r\n\r\n  /**\r\n   * Get the current table element.\r\n   */\r\n  get table(): HTMLTableElement {\r\n    return this.#table;\r\n  }\r\n\r\n  /**\r\n   * Get the current virtual scroll setting.\r\n   * If the value is 0, virtual scroll is disabled.\r\n   * If the value is true, virtual scroll is enabled.\r\n   * If the value is a number, it will be used as the row count for virtual scroll.\r\n   */\r\n  get virtualScroll(): boolean {\r\n    return !!this.#virtualScroll;\r\n  }\r\n\r\n  set virtualScroll(value) {\r\n    if (value == this.virtualScroll) return;\r\n\r\n    if (value) {\r\n      this.#virtualScroll = new VirtualScroll({\r\n        container: this.#scroller,\r\n        element: this.#tbody,\r\n        generator: (index) => this.#createRow(index),\r\n      });\r\n      this.#virtualScroll.start();\r\n    } else {\r\n      this.#virtualScroll?.stop();\r\n      this.#virtualScroll = undefined;\r\n    }\r\n\r\n    this.#updateTable();\r\n  }\r\n\r\n  /**\r\n   * Loads the given rows into the table.\r\n   * This will overwrite any already existing rows.\r\n   */\r\n  loadData(rows: Row[]) {\r\n    if (Array.isArray(rows) && rows.length > 0) {\r\n      let index = 0;\r\n\r\n      this.#rows = rows as RowData[];\r\n      this.#filteredRows = this.#rows;\r\n\r\n      for (const row of this.#rows) {\r\n        // Add the index\r\n        const metadata: RowMetadata = {\r\n          index: index++,\r\n          tokens: {},\r\n          sortValues: {}\r\n        };\r\n        row._metadata = metadata;\r\n\r\n        for (const field of Object.keys(this.#columnData)) {\r\n          const col = this.#columnData[field];\r\n          const value = this.#getNestedValue(row, field);\r\n\r\n          // Cache precomputed values for sorting\r\n          if (typeof col.sortValueCallback === \"function\") {\r\n            metadata.sortValues[field] = col.sortValueCallback(value);\r\n          } else if (typeof value === \"string\") {\r\n            metadata.sortValues[field] = value.toLocaleLowerCase();\r\n          } else {\r\n            metadata.sortValues[field] = value;\r\n          }\r\n\r\n          // Tokenize any searchable columns\r\n          if (col.searchable && col.tokenize && value) {\r\n            metadata.tokens[field] = [value, ...this.#tokenizer(value)];\r\n          }\r\n        }\r\n      }\r\n\r\n    } else {\r\n      this.#rows = [];\r\n      this.#filteredRows = [];\r\n    }\r\n\r\n    this.#updateHeaders();\r\n    this.#filterRows();\r\n  }\r\n\r\n  /**\r\n   * Shows a message overlay that will cover the table.\r\n   */\r\n  showMessage(text: string, classes: string | string[]) {\r\n    if (Array.isArray(classes)) {\r\n      classes = classes.join(\" \");\r\n    } else if (typeof classes !== \"string\") {\r\n      classes = \"\";\r\n    }\r\n\r\n    const colSpan = Object.keys(this.#columnData).length;\r\n    this.#tbody.innerHTML = `<tr class=\"${classes}\"><td colSpan=${colSpan}>${text}</td></tr>`;\r\n  }\r\n\r\n  /**\r\n   * Search the table using the given query.\r\n   * The query can be a string or a regular expression.\r\n   * If the query is an empty string, it will clear the search.\r\n   * @param query\r\n   */\r\n  search(query: string | RegExp) {\r\n    this.#query = query !== \"\" ? query : null;\r\n    this.#filterRows();\r\n  }\r\n\r\n  /**\r\n   * Apply the given filters to the table.\r\n   * Filters should be an object with keys for any columns\r\n   * to be filtered and values to match against the underlying data.\r\n   * E.g. {quantity: 1} will only show rows where the quantity column = 1\r\n   * Can also be a function that will be called for each row.\r\n   * @param filters\r\n   */\r\n  filter(filters: Record<string, any> | FilterCallback) {\r\n    if (typeof filters !== \"object\" && typeof filters !== \"function\") {\r\n      throw new TypeError(\"filters must be object or function\");\r\n    }\r\n    this.#filters = filters;\r\n    this.#filterRows();\r\n  }\r\n\r\n  /**\r\n   * Sort the given column using the given order (asc or desc).\r\n   * If order is none, the columns will be \"unsorted\" and revert\r\n   * revert back to sorting the by the index ascending.\r\n   * @param colName\r\n   * @param order\r\n   */\r\n  sort(colName: string, order: SortOrder) {\r\n    const col = this.#columnData[colName];\r\n    if (!col) {\r\n      console.warn(`Attempting to sort non-existent column ${colName}`);\r\n      return;\r\n    }\r\n\r\n    if (order != col.sortOrder) {\r\n      if (order === \"asc\" || order === \"desc\") {\r\n        // If we are changing the sort order of a column\r\n        // keep it's existing priority.\r\n        if (col.sortPriority === Number.MAX_VALUE) {\r\n          col.sortPriority = this.#sortPriority++;\r\n        }\r\n      } else {\r\n        col.sortPriority = Number.MAX_VALUE;\r\n        this.#sortPriority--;\r\n      }\r\n      col.sortOrder = order;\r\n    }\r\n\r\n    this.#updateHeaders();\r\n    this.#sortRows();\r\n\r\n    const event = new CustomEvent(DataTable.Events.COL_SORT, {\r\n      detail: {\r\n        column: col,\r\n        order: col.sortOrder,\r\n      },\r\n      bubbles: true,\r\n      cancelable: true,\r\n    });\r\n\r\n    this.#table.dispatchEvent(event);\r\n  }\r\n\r\n  /**\r\n   * Set the visibility of a column.\r\n   * @param colName\r\n   * @param visible\r\n   */\r\n  setColumnVisibility(colName: string, visisble: boolean) {\r\n    const col = this.#columnData[colName];\r\n    if (!col) {\r\n      console.warn(\r\n        `Attempting to ${visisble ? \"show\" : \"hide\"\r\n        } non-existent column ${colName}`\r\n      );\r\n      return;\r\n    }\r\n\r\n    col.visible = visisble;\r\n    this.#updateHeaders();\r\n    // If we hide a column that has sorting, we need to resort.\r\n    // This will also handle hiding all of the columns elements.\r\n    this.#sortRows();\r\n\r\n    const eventName = visisble ? DataTable.Events.COL_SHOW : DataTable.Events.COL_HIDE;\r\n    const event = new CustomEvent(eventName, {\r\n      detail: {\r\n        column: col,\r\n        visible: visisble,\r\n      },\r\n      bubbles: true,\r\n      cancelable: true,\r\n    });\r\n\r\n    this.#table.dispatchEvent(event);\r\n  }\r\n\r\n  /**\r\n   * Show a column.\r\n   * @param field\r\n   */\r\n  showColumn(field: string) {\r\n    this.setColumnVisibility(field, true);\r\n  }\r\n\r\n  /**\r\n   * Hide a column.\r\n   * @param field\r\n   */\r\n  hideColumn(field: string) {\r\n    this.setColumnVisibility(field, false);\r\n  }\r\n\r\n  /**\r\n   * Export the current visible table data to a CSV file.\r\n   * @param filename - The name of the file to save.\r\n   * @param all - If true, export all rows. If false, only export the filtered rows.\r\n   */\r\n  export(filename: string, all = false) {\r\n    const rows = all ? this.#rows : this.#filteredRows;\r\n    if (rows.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const csvHeaders = Object.keys(rows[0]).filter((value) => {\r\n      if (!(value in this.#columnData)) {\r\n        return false;\r\n      }\r\n\r\n      return all ? true : this.#columnData[value].element.hidden === false;\r\n    });\r\n\r\n    const csvRows = rows\r\n      .map((row) => {\r\n        const list = [];\r\n        for (let [key, value] of Object.entries(row)) {\r\n          if (key in this.#columnData) {\r\n            const col = this.#columnData[key];\r\n            if (all || !col.element.hidden) {\r\n              if (typeof col.valueFormatter === \"function\") {\r\n                value = col.valueFormatter(value, row);\r\n              }\r\n\r\n              value = String(value).replace('\"', '\"\"');\r\n              list.push(`\"${value}\"`);\r\n            }\r\n          }\r\n        }\r\n        return list.join(\",\");\r\n      })\r\n      .join(\"\\n\");\r\n\r\n    const csvContent = csvHeaders + \"\\n\" + csvRows;\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8,\" });\r\n    const a = document.createElement(\"a\");\r\n    a.style.display = \"none\";\r\n    a.href = URL.createObjectURL(blob);\r\n    a.download = `${filename}.csv`;\r\n    document.body.append(a);\r\n    a.click();\r\n    a.remove();\r\n  }\r\n\r\n  /**\r\n   * Scrolls to the given row index in the table.\r\n   * @param index\r\n   */\r\n  scrollTo(index: number) {\r\n    if (this.#virtualScroll) {\r\n      this.#virtualScroll.scrollTo(index);\r\n    }\r\n\r\n    const row = this.#tbody.querySelector(`tr[data-dt-index=\"${index}\"]`);\r\n    if (row) {\r\n      row.scrollIntoView(true);\r\n      const theadHeight = parseFloat(getComputedStyle(this.#thead).height);\r\n      this.#scroller.scrollTop -= theadHeight;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the order of the columns in the table.\r\n   * @param fields \r\n   */\r\n  setColumnOrder(fields: string[]) {\r\n    if (!Array.isArray(fields)) {\r\n      throw new TypeError(\"fields must be an array of field names\");\r\n    }\r\n\r\n    const newColumns = fields.map((field) => this.#columnData[field])\r\n      .filter((col) => col !== null);\r\n\r\n    this.#columnData = Object.fromEntries(newColumns.map((col) => [col.field, col]));\r\n    this.refresh();\r\n  }\r\n\r\n  refresh() {\r\n    this.#updateHeaders();\r\n    this.#filterRows();\r\n  }\r\n\r\n  #searchField(value: any, query: RegExp | string): boolean {\r\n    if (Array.isArray(value)) {\r\n      return value.some((element) => this.#searchField(element, query));\r\n    }\r\n\r\n    if (query instanceof RegExp) {\r\n      return query.test(String(value));\r\n    }\r\n\r\n    return String(value).toLocaleLowerCase().includes(query);\r\n  }\r\n\r\n  #filterField(value: any, filter: any, filterFunction?: ColumnFilterCallback): boolean {\r\n    if (Array.isArray(filter)) {\r\n      // If it's an array, we will use an OR filter.\r\n      // If any filters in the array match, keep it.\r\n      for (const element of filter) {\r\n        if (this.#filterField(value, element)) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n\r\n    if (typeof filterFunction === \"function\") {\r\n      return filterFunction(value, filter);\r\n    }\r\n\r\n    if (filter instanceof RegExp) {\r\n      return filter.test(String(value));\r\n    }\r\n\r\n    return filter === value;\r\n  }\r\n\r\n  #filterRow(row: any, index: number): boolean {\r\n    if (typeof this.#filters === \"function\") {\r\n      return this.#filters(row, index);\r\n    }\r\n\r\n    for (const field of Object.keys(this.#filters || {})) {\r\n      const filter = this.#filters[field];\r\n      const col = this.#columnData[field];\r\n      const filterCallback = col ? col.filterCallback : undefined;\r\n      const value = this.#getNestedValue(row, field);\r\n      if (!this.#filterField(value, filter, filterCallback)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  #filterRows() {\r\n    const filter =\r\n      typeof this.#filters === \"function\"\r\n        ? this.#filters\r\n        : (row: object, index: number) => this.#filterRow(row, index);\r\n\r\n    let query: RegExp | string | null = null;\r\n    let queryTokens: string[] | RegExp[] = [];\r\n    if (this.#query instanceof RegExp) {\r\n      query = this.#query;\r\n      queryTokens = [query];\r\n    } else if (typeof this.#query === \"string\") {\r\n      query = this.#query.toLocaleLowerCase();\r\n      queryTokens = this.#tokenizer(query);\r\n    }\r\n\r\n    this.#filteredRows = this.#rows.filter((row, index) => {\r\n      row._metadata.searchScore = 0;\r\n      // Filter takes precedence over search.\r\n      if (!filter(row, index)) {\r\n        return false;\r\n      }\r\n\r\n      if (!query) {\r\n        return true;\r\n      }\r\n\r\n      const searchableFields = Object.values(this.#columnData)\r\n        .filter((col) => col.searchable)\r\n        .map((c) => c.field);\r\n\r\n      const fields = [...searchableFields, ...this.#extraSearchFields];\r\n\r\n      for (const field of fields) {\r\n        const col = this.#columnData[field];\r\n        if (col && field in row._metadata.tokens) {\r\n          const fieldTokens = row._metadata.tokens[field];\r\n          for (const token of queryTokens) {\r\n            if (this.#searchField(fieldTokens, token)) {\r\n              if (typeof token === \"string\") {\r\n                row._metadata.searchScore += token.length;\r\n              } else {\r\n                row._metadata.searchScore++;\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          const value = this.#getNestedValue(row, field);\r\n          if (this.#searchField(value, query)) {\r\n            if (typeof query === \"string\") {\r\n              row._metadata.searchScore += query.length;\r\n            } else {\r\n              row._metadata.searchScore++;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return row._metadata.searchScore > 0;\r\n    });\r\n\r\n    this.#sortRows();\r\n    this.#updateTable();\r\n\r\n    this.#table.dispatchEvent(new CustomEvent(DataTable.Events.ROWS_CHANGED, {\r\n      bubbles: true,\r\n      cancelable: true,\r\n    }));\r\n  }\r\n\r\n  #compareRows(a: RowData, b: RowData, col: ColumnOptions): number {\r\n    let aValue, bValue;\r\n    if (col.sortOrder === \"asc\") {\r\n      aValue = a._metadata.sortValues[col.field];\r\n      bValue = b._metadata.sortValues[col.field];\r\n    } else if (col.sortOrder === \"desc\") {\r\n      aValue = b._metadata.sortValues[col.field];\r\n      bValue = a._metadata.sortValues[col.field];\r\n    }\r\n\r\n    if (typeof col.sorter === \"function\") {\r\n      const ret = col.sorter(aValue, bValue);\r\n      if (ret !== 0) return ret;\r\n    }\r\n\r\n    if (aValue < bValue) return -1;\r\n    if (aValue > bValue) return 1;\r\n    return 0;\r\n  }\r\n\r\n  #sortRows() {\r\n    const sortedColumns = Object.values(this.#columnData)\r\n      // Only sort by visible columns with valid sort priorities\r\n      .filter((col) => !col.element.hidden && col.sortOrder)\r\n      // Sort our columns by their sort priority.\r\n      // This is how sorting by multiple columns is handled.\r\n      .sort((a, b) => a.sortPriority - b.sortPriority);\r\n\r\n    this.#filteredRows.sort((a, b) => {\r\n      // Try to sort by search score if there is a query.\r\n      let aValue = a._metadata.searchScore || 0;\r\n      let bValue = b._metadata.searchScore || 0;\r\n      if (aValue > bValue) return -1;\r\n      if (aValue < bValue) return 1;\r\n\r\n      for (const col of sortedColumns) {\r\n        const comp = this.#compareRows(a, b, col);\r\n        if (comp !== 0) {\r\n          return comp;\r\n        }\r\n      }\r\n\r\n      // Always fall back to the index column\r\n      return a._metadata.index - b._metadata.index;\r\n    });\r\n    this.#updateTable();\r\n  }\r\n\r\n  #updateHeaders() {\r\n    for (const field of Object.keys(this.#columnData)) {\r\n      const col = this.#columnData[field];\r\n\r\n      // Update the order of headers\r\n      col.element.parentElement?.append(col.element);\r\n      col.element.hidden = !col.visible;\r\n\r\n      if (col.element.style.width === \"\") {\r\n        col.element.style.width = col.element.offsetWidth + \"px\";\r\n      }\r\n\r\n      if (col.sortOrder === \"asc\") {\r\n        col.element?.classList.add(\"dt-ascending\");\r\n        col.element?.classList.remove(\"dt-descending\");\r\n      } else if (col.sortOrder === \"desc\") {\r\n        col.element?.classList.add(\"dt-descending\");\r\n        col.element?.classList.remove(\"dt-ascending\");\r\n      } else {\r\n        col.element?.classList.remove(\"dt-ascending\");\r\n        col.element?.classList.remove(\"dt-descending\");\r\n      }\r\n    }\r\n\r\n    // The last header should never have a width. This forces it to fill\r\n    // the remaining space in the table. Without this, resizing can feel \"jumpy\".\r\n    const lastCol = Object.values(this.#columnData).filter((c) => c.visible).slice(-1)[0];\r\n    if (lastCol) {\r\n      lastCol.element.style.width = \"\";\r\n    }\r\n  }\r\n\r\n  #updateTable() {\r\n    this.#tbody.innerHTML = \"\";\r\n    if (this.#filteredRows.length) {\r\n      if (this.#virtualScroll) {\r\n        try {\r\n          this.#virtualScroll.rowCount = this.#filteredRows.length;\r\n        } catch (error) {\r\n          if (error instanceof VirtualScrollError) {\r\n            console.warn(\r\n              \"Failed to start virtual scroll... falling back to standard rendering\"\r\n            );\r\n            console.warn(error.stack);\r\n          }\r\n        }\r\n      } else {\r\n\r\n        if (this.#filteredRows.length > WARN_ROW_COUNT) {\r\n          const count = WARN_ROW_COUNT.toLocaleString();\r\n          console.warn(\r\n            `Virtual scroll disabled with more than ${count} rows... Good luck with that!`\r\n          );\r\n        }\r\n\r\n        const rowElements = this.#filteredRows.map((_, index) => this.#createRow(index));\r\n        this.#tbody.append(...rowElements);\r\n      }\r\n    } else if (this.#rows.length === 0) {\r\n      this.showMessage(this.#noDataText, \"dt-empty\");\r\n    } else {\r\n      this.showMessage(this.#noMatchText, \"dt-empty\");\r\n    }\r\n  }\r\n\r\n  #updateCell(td: HTMLTableCellElement, value: any, col: ColumnData, row: object) {\r\n    if (typeof col.valueFormatter === \"function\") {\r\n      value = col.valueFormatter(value, row);\r\n    }\r\n    td.innerText = value == null ? \"-\" : value;\r\n\r\n    if (typeof col.elementFormatter === \"function\") {\r\n      col.elementFormatter(value, row, td);\r\n    }\r\n\r\n    if (\r\n      this.#highlightSearch &&\r\n      this.#query &&\r\n      this.#query != \"\" &&\r\n      col.searchable\r\n    ) {\r\n      td.innerHTML = td.innerText.replace(\r\n        new RegExp(this.#query, \"i\"),\r\n        (match) => `<mark>${match}</mark>`\r\n      );\r\n    }\r\n\r\n    td.hidden = col.visible ? false : true;\r\n  }\r\n\r\n  #createRow(index: number): HTMLTableRowElement {\r\n    const row = this.#filteredRows[index];\r\n    const tr = document.createElement(\"tr\");\r\n    tr.classList.add(...classesToArray(this.#classes.tr));\r\n    tr.dataset.dtIndex = String(index);\r\n\r\n    for (const field of Object.keys(this.#columnData)) {\r\n      let value = this.#getNestedValue(row, field);\r\n      const col = this.#columnData[field];\r\n      const td = document.createElement(\"td\");\r\n      td.classList.add(...classesToArray(this.#classes.td));\r\n      td.dataset.dtField = field;\r\n      this.#updateCell(td, value, col, row);\r\n      tr.append(td);\r\n    }\r\n\r\n    if (typeof this.#rowFormatter === \"function\") {\r\n      this.#rowFormatter(row, tr);\r\n    }\r\n\r\n    return tr;\r\n  }\r\n\r\n  #getNestedValue(obj: any, path: string) {\r\n    const keys = path.split(\".\");\r\n    let current = obj;\r\n\r\n    for (const key of keys) {\r\n      if (current && typeof current === \"object\") {\r\n        current = current[key];\r\n      } else {\r\n        return undefined; // Or handle the error as needed\r\n      }\r\n    }\r\n\r\n    return current;\r\n  }\r\n\r\n  #resizeColumnStart = (event: MouseEvent) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    const target: HTMLElement = event.target as HTMLElement;\r\n    const header = target.closest(\"th\");\r\n    if (!header) return;\r\n\r\n    const field = header.dataset.dtField;\r\n    if (!field) return;\r\n\r\n    const col = this.#columnData[field];\r\n    if (!col) return;\r\n\r\n    this.#resizingColumn = col;\r\n\r\n    col.resizeStartX = event.clientX;\r\n    col.resizeStartWidth = header.offsetWidth;\r\n\r\n    document.addEventListener(\"mousemove\", this.#resizeColumnMove);\r\n    document.addEventListener(\"mouseup\", this.#resizeColumnEnd);\r\n  }\r\n\r\n  #resizeColumnMove = (event: MouseEvent) => {\r\n    if (!this.#resizingColumn) return;\r\n\r\n    event.preventDefault();\r\n    const newWidth = this.#resizingColumn.resizeStartWidth! + (event.clientX - this.#resizingColumn.resizeStartX!);\r\n    this.#resizingColumn.element.style.width = `${newWidth}px`;\r\n  }\r\n\r\n  #resizeColumnEnd = (event: MouseEvent) => {\r\n    if (!this.#resizingColumn) return;\r\n\r\n    document.removeEventListener(\"mousemove\", this.#resizeColumnMove);\r\n    document.removeEventListener(\"mouseup\", this.#resizeColumnEnd);\r\n    this.#table.dispatchEvent(new CustomEvent(DataTable.Events.COL_RESIZE, {\r\n      detail: {\r\n        column: this.#resizingColumn,\r\n        width: this.#resizingColumn.element.offsetWidth,\r\n      },\r\n      bubbles: true,\r\n      cancelable: true,\r\n    }));\r\n    this.#resizingColumn = null;\r\n  }\r\n\r\n  #resizeColumnDoubleClick = (event: MouseEvent) => {\r\n    const target = event.target as HTMLElement;\r\n    const header = target.closest(\"th\");\r\n    if (header) {\r\n      header.style.width = \"0px\";\r\n    }\r\n  }\r\n\r\n  #dragColumnStart = (event: DragEvent) => {\r\n    const target = event.target as HTMLElement;\r\n    const field = target.dataset.dtField;\r\n\r\n    if (event.dataTransfer && field) {\r\n      event.dataTransfer.effectAllowed = \"move\";\r\n      event.dataTransfer.setData(\"text/plain\", field);\r\n    }\r\n  }\r\n\r\n  #dragColumnOver = (event: DragEvent) => {\r\n    event.preventDefault();\r\n    if (event.dataTransfer) {\r\n      event.dataTransfer.dropEffect = \"move\";\r\n    }\r\n    return false;\r\n  }\r\n\r\n  #dragColumnEnter = (event: DragEvent) => {\r\n    const target = event.target as HTMLElement;\r\n    target.classList.add(\"dt-drag-over\");\r\n  }\r\n\r\n  #dragColumnLeave = (event: DragEvent) => {\r\n    const target = event.target as HTMLElement;\r\n    target.classList.remove(\"dt-drag-over\");\r\n  }\r\n\r\n  #dragColumnDrop = (event: DragEvent) => {\r\n    const dragField = event.dataTransfer?.getData(\"text/plain\");\r\n    const target = event.currentTarget as HTMLElement;\r\n    const dropField = target.dataset.dtField;\r\n\r\n    if (!dragField || !dropField) return;\r\n\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    const columns = Object.values(this.#columnData);\r\n    const dragIndex = columns.findIndex((col) => col.field === dragField);\r\n    const dropIndex = columns.findIndex((col) => col.field === dropField);\r\n\r\n    if (dragIndex > -1 && dropIndex > -1) {\r\n      const [draggedColumn] = columns.splice(dragIndex, 1);\r\n      const droppedColumn = this.#columnData[dropField];\r\n\r\n      // Force the current last column width to it's current width\r\n      // and remove the width from the new last column.\r\n      // This should force the columns to keep their current widths.\r\n      if (dropIndex === columns.length) {\r\n        droppedColumn.element.style.width = droppedColumn.element.offsetWidth + \"px\";\r\n        draggedColumn.element.style.width = \"\";\r\n      }\r\n\r\n      columns.splice(dropIndex, 0, draggedColumn);\r\n\r\n      // Update the #columns object\r\n      this.#columnData = Object.fromEntries(columns.map((col) => [col.field, col]));\r\n      // Re-render the table\r\n      this.#updateHeaders();\r\n      this.#updateTable();\r\n\r\n      this.#table.dispatchEvent(new CustomEvent(DataTable.Events.COL_REARRANGE, {\r\n        detail: {\r\n          draggedColumn: draggedColumn,\r\n          dropColumn: this.#columnData[dropField],\r\n          columns: columns,\r\n        },\r\n        bubbles: true,\r\n        cancelable: true,\r\n      }));\r\n    }\r\n  }\r\n\r\n  #dragColumnEnd = (event: DragEvent) => {\r\n    const elements = document.querySelectorAll(\".dt-drag-over\");\r\n    for (const element of elements) {\r\n      element.classList.remove(\"dt-drag-over\");\r\n    }\r\n  }\r\n}\r\n\r\ninterface ColumnData {\r\n  field: string;\r\n  title: string;\r\n  sortable: boolean;\r\n  searchable: boolean;\r\n  tokenize: boolean;\r\n  element: HTMLElement;\r\n  visible: boolean;\r\n  sortOrder: SortOrder;\r\n  sortPriority: number;\r\n  resizeStartX: number | null;\r\n  resizeStartWidth: number | null;\r\n  valueFormatter?: ValueFormatterCallback;\r\n  elementFormatter?: CellFormatterCallback;\r\n  comparatorCallback?: ComparatorCallback;\r\n  filterCallback?: ColumnFilterCallback;\r\n  sortValueCallback?: SortValueCallback;\r\n}\r\n\r\ninterface RowData extends Row {\r\n  _metadata: RowMetadata;\r\n}\r\n\r\ninterface RowMetadata {\r\n  index: number;\r\n  searchScore?: number;\r\n  tokens: Record<string, string[]>;\r\n  sortValues: Record<string, any>;\r\n}\r\n\r\nconst WARN_ROW_COUNT = 10_000;","import { DataTable } from \"../datatable\";\r\nimport { ColumnState } from \"../types\";\r\n\r\ninterface Options {\r\n    saveColumnSorting: boolean;\r\n    saveColumnOrder: boolean;\r\n    saveColumnVisibility: boolean;\r\n    saveColumnWidth: boolean;\r\n}\r\n\r\nexport class LocalStorageAdapter {\r\n    #dataTable: DataTable;\r\n    #storageKey: string;\r\n    #options: Options = {\r\n        saveColumnSorting: true,\r\n        saveColumnVisibility: true,        \r\n        saveColumnWidth: true,\r\n        saveColumnOrder: true,\r\n    }\r\n\r\n    /**\r\n     * @param dataTable - The DataTable instance to monitor.\r\n     * @param storageKey - The key to use for saving the state in localStorage.\r\n     * @param options - The key to use for saving the state in localStorage.\r\n     */\r\n    constructor(dataTable: DataTable, storageKey: string, options?: Options) {\r\n        this.#dataTable = dataTable;\r\n        this.#storageKey = storageKey;\r\n        this.#options = { ...this.#options, ...options };\r\n\r\n        // Restore state before adding the listeners.\r\n        this.restoreState();\r\n\r\n        const table = dataTable.table;\r\n\r\n        if (this.#options.saveColumnSorting) {\r\n            table.addEventListener(DataTable.Events.COL_SORT, () => this.saveState());\r\n        }\r\n\r\n        if (this.#options.saveColumnVisibility) {\r\n            table.addEventListener(DataTable.Events.COL_HIDE, () => this.saveState());\r\n            table.addEventListener(DataTable.Events.COL_SHOW, () => this.saveState());\r\n        }\r\n\r\n        if (this.#options.saveColumnWidth) {\r\n            table.addEventListener(DataTable.Events.COL_RESIZE, () => this.saveState());\r\n        }\r\n\r\n        if (this.#options.saveColumnOrder) {\r\n            table.addEventListener(DataTable.Events.COL_REARRANGE, () => this.saveState());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves the current column state to localStorage.\r\n     */\r\n    saveState() {\r\n        const states = this.#dataTable.columnStates;\r\n        for (const state of states) {\r\n            if (!this.#options.saveColumnSorting) {\r\n                state.sortOrder = undefined;\r\n                state.sortPriority = undefined;\r\n            }\r\n\r\n            if (!this.#options.saveColumnVisibility) {\r\n                state.visible = undefined;\r\n            }\r\n\r\n            if (!this.#options.saveColumnWidth) {\r\n                state.width = undefined;\r\n            }\r\n        }\r\n\r\n        localStorage.setItem(this.#storageKey, JSON.stringify(this.#dataTable.columnStates));\r\n    }\r\n\r\n    /**\r\n     * Restores the column state from localStorage.\r\n     */\r\n    restoreState() {\r\n        const savedState = localStorage.getItem(this.#storageKey);\r\n        if (!savedState) return;\r\n\r\n        try {\r\n            const columnStates = JSON.parse(savedState) as ColumnState[];\r\n            this.#dataTable.columnStates = columnStates;\r\n\r\n            if (this.#options.saveColumnOrder) {\r\n                this.#dataTable.setColumnOrder(columnStates.map((col: ColumnState) => col.field));\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error(\"Failed to restore DataTable state:\", error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the saved state from localStorage.\r\n     */\r\n    clearState() {\r\n        localStorage.removeItem(this.#storageKey);\r\n    }\r\n}"],"mappings":"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","names":["_warned","_container","_element","_generator","_rowCount","_rowHeight","_padding","_animationFrame","_started","_scrollTop","_scrollCallback","_renderCallback","_VirtualScroll_instances","renderChunk_fn","updateRowHeight_fn","_VirtualScroll","container","element","generator","nodePadding","__privateAdd","__privateGet","__privateSet","__privateMethod","count","index","scrollTop","rowCount","rowHeight","padding","totalContentHeight","actualHeight","viewHeight","startNode","visibleNodesCount","offsetY","remainingHeight","visibleChildren","_","topRow","bottomRow","e","renderSize","elements","i","VirtualScrollError","VirtualScroll","message","classesToArray","classes","toHumanReadable","str","char","whitespaceTokenizer","value","_table","_thead","_tbody","_tfoot","_scroller","_columnData","_rows","_filteredRows","_query","_filters","_extraSearchFields","_rowFormatter","_virtualScroll","_highlightSearch","_tokenizer","_sortPriority","_noDataText","_noMatchText","_classes","_resizingColumn","_DataTable_instances","searchField_fn","filterField_fn","filterRow_fn","filterRows_fn","compareRows_fn","sortRows_fn","updateHeaders_fn","updateTable_fn","updateCell_fn","createRow_fn","getNestedValue_fn","_resizeColumnStart","_resizeColumnMove","_resizeColumnEnd","_resizeColumnDoubleClick","_dragColumnStart","_dragColumnOver","_dragColumnEnter","_dragColumnLeave","_dragColumnDrop","_dragColumnEnd","_DataTable","table","options","__privateAdd","event","header","field","col","__privateGet","__privateSet","newWidth","_a","dragField","dropField","columns","dragIndex","dropIndex","draggedColumn","droppedColumn","__privateMethod","elements","element","_b","_c","_d","_e","_f","_g","_h","finalOptions","__spreadValues","tableElement","classesToArray","thead","headerRow","tbody","tr","td","index","row","colVisible","colOptions","colData","toHumanReadable","th","nameElement","resizer","states","state","column","value","VirtualScroll","rows","metadata","text","classes","colSpan","query","filters","colName","order","__privateWrapper","visisble","eventName","filename","all","csvHeaders","csvRows","list","key","csvContent","blob","a","theadHeight","fields","newColumns","filter","filterFunction","filterCallback","queryTokens","c","fieldTokens","token","b","aValue","bValue","ret","sortedColumns","comp","lastCol","error","VirtualScrollError","WARN_ROW_COUNT","count","rowElements","_","match","obj","path","keys","current","whitespaceTokenizer","DataTable","_dataTable","_storageKey","_options","LocalStorageAdapter","dataTable","storageKey","options","__privateAdd","__privateSet","__spreadValues","__privateGet","table","DataTable","states","state","savedState","columnStates","col","error"]}