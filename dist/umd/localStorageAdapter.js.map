{"version":3,"file":"localStorageAdapter.js","sources":["../../src/plugins/localStorageAdapter.js"],"sourcesContent":["import { DataTable } from \"../datatable.js\";\r\n\r\n/**\r\n * @typedef {object} Options\r\n * @property {string} saveColumnSorting - Whether to save sorting state. Default is true.\r\n * @property {string} saveColumnOrder - Whether to save column order. Default is true.\r\n * @property {string} saveColumnVisibility - Whether to save column visibility. Default is true.\r\n * @property {string} saveColumnWidth - Whether to save column width. Default is true.\r\n */\r\n\r\nexport class LocalStorageAdapter {\r\n    /** @type {DataTable} */\r\n    #dataTable;\r\n    /** @type {string} */\r\n    #storageKey;\r\n    /** @type {Options} */\r\n    #options = {\r\n        saveColumnSorting: true,\r\n        saveColumnVisibility: true,        \r\n        saveColumnWidth: true,\r\n        saveColumnOrder: true,\r\n    }\r\n\r\n    /**\r\n     * @param {DataTable} dataTable - The DataTable instance to monitor.\r\n     * @param {string} storageKey - The key to use for saving the state in localStorage.\r\n     * @param {Options} options - The key to use for saving the state in localStorage.\r\n     */\r\n    constructor(dataTable, storageKey, options = {}) {\r\n        this.#dataTable = dataTable;\r\n        this.#storageKey = storageKey;\r\n        this.#options = { ...this.#options, ...options };\r\n\r\n        // Restore state before adding the listeners.\r\n        this.restoreState();\r\n\r\n        const table = dataTable.table;\r\n\r\n        if (this.#options.saveColumnSorting) {\r\n            table.addEventListener(DataTable.Events.COL_SORT, () => this.saveState());\r\n        }\r\n\r\n        if (this.#options.saveColumnVisibility) {\r\n            table.addEventListener(DataTable.Events.COL_HIDE, () => this.saveState());\r\n            table.addEventListener(DataTable.Events.COL_SHOW, () => this.saveState());\r\n        }\r\n\r\n        if (this.#options.saveColumnWidth) {\r\n            table.addEventListener(DataTable.Events.COL_RESIZE, () => this.saveState());\r\n        }\r\n\r\n        if (this.#options.saveColumnOrder) {\r\n            table.addEventListener(DataTable.Events.COL_REARRANGE, () => this.saveState());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves the current column state to localStorage.\r\n     */\r\n    saveState() {\r\n        const columnStates = this.#dataTable.columns.map((col) => ({\r\n            field: col.field,\r\n            sortOrder: col.sortOrder,\r\n            sortPriority: col.sortPriority,\r\n            visible: col.visible,\r\n            width: col.element.style.width,\r\n        }));\r\n\r\n        localStorage.setItem(this.#storageKey, JSON.stringify(columnStates));\r\n    }\r\n\r\n    /**\r\n     * Restores the column state from localStorage.\r\n     */\r\n    restoreState() {\r\n        const savedState = localStorage.getItem(this.#storageKey);\r\n        if (!savedState) return;\r\n\r\n        try {\r\n            const columnStates = JSON.parse(savedState);\r\n            const columns = this.#dataTable.columns;\r\n\r\n            columnStates.forEach((savedCol) => {\r\n                const col = columns.find((c) => c.field === savedCol.field);\r\n                if (col) {\r\n                    \r\n                    if (this.#options.saveColumnSorting) {\r\n                        col.sortOrder = savedCol.sortOrder;\r\n                        col.sortPriority = savedCol.sortPriority;\r\n                    }\r\n\r\n                    if (this.#options.saveColumnVisibility) {\r\n                        this.#dataTable.setColumnVisibility(col.field, savedCol.visible);\r\n                    }\r\n\r\n                    if (this.#options.saveColumnWidth) {\r\n                        col.element.style.width = savedCol.width;\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (this.#options.saveColumnOrder) {\r\n                this.#dataTable.setColumnOrder(columnStates.map((col) => col.field));\r\n            }\r\n\r\n            this.#dataTable.refresh();\r\n\r\n        } catch (error) {\r\n            console.error(\"Failed to restore DataTable state:\", error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the saved state from localStorage.\r\n     */\r\n    clearState() {\r\n        localStorage.removeItem(this.#storageKey);\r\n    }\r\n}"],"names":["DataTable"],"mappings":"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"}