{"version":3,"file":"datatable.bundle.min.js","sources":["../../src/datatable.js","../../src/plugins/localStorageAdapter.js"],"sourcesContent":["import './datatable.css';\r\n\r\n/**\r\n * Class for creating a DataTable that will add sort, search, filter, and virtual scroll to a table.\r\n */\r\nexport class DataTable {\r\n\r\n  static Events = {\r\n    ROW_CLICK: \"dt.row.click\",\r\n    ROWS_CHANGED: \"dt.rows.changed\",\r\n    COL_HIDE: \"dt.col.hide\",\r\n    COL_SHOW: \"dt.col.show\",\r\n    COL_SORT: \"dt.col.sort\",\r\n    COL_RESIZE: \"dt.col.resize\",\r\n    COL_REARRANGE: \"dt.col.rearrange\",\r\n  }\r\n\r\n  /** @type {HTMLTableElement} */\r\n  #table;\r\n  /** @type {HTMLElement} */\r\n  #thead;\r\n  /** @type {HTMLElement} */\r\n  #tbody;\r\n  /** @type {HTMLElement} */\r\n  #tfoot;\r\n  /** @type {HTMLElement} */\r\n  #scroller;\r\n  /** @type {object<string, ColumnOptions>} */\r\n  #columns = {};\r\n  /** @type {object[]} */\r\n  #rows = [];\r\n  /** @type {object[]} */\r\n  #filteredRows = [];\r\n  /** @type {RegExp | string} */\r\n  #query;\r\n  /** @type {object} */\r\n  #filters;\r\n  /** @type {string[]} */\r\n  #extraFields;\r\n  /** @type {RowFormatter} */\r\n  #rowFormatter;\r\n  /** @type {VirtualScroll} */\r\n  #virtualScroll;\r\n  /** @type {number} */\r\n  #virtualScrollCount;\r\n  /** @type {boolean} */\r\n  #highlightSearch;\r\n  /** @type {TokenizerFunction} */\r\n  #tokenizer = (value) =>\r\n    String(value)\r\n      .toLowerCase()\r\n      .replace(/[^\\w\\s]/g, \" \")\r\n      .trim()\r\n      .split(/\\s+/);\r\n\r\n  /** @type {number} */\r\n  #sortPriority = 0;\r\n  /** @type {string} */\r\n  #noDataText;\r\n  /** @type {string} */\r\n  #noMatchText;\r\n  /** @type {TableClasses} */\r\n  #classes;\r\n  /** @type {ColumnOptions} */\r\n  #resizingColumn = null;\r\n\r\n  /**\r\n   * @param {string | HTMLTableElement} table - Selector or HTMLElement for the table.\r\n   * @param {TableOptions} options\r\n   */\r\n  constructor(table, {\r\n    formatter,\r\n    columns = [],\r\n    data,\r\n    virtualScroll = 1000,\r\n    highlightSearch = true,\r\n    resizable = true,\r\n    rearrangeable = false,\r\n    extraSearchFields,\r\n    noDataText,\r\n    noMatchText,\r\n    classes,\r\n    tokenizer,\r\n  } = {}) {\r\n    if (typeof table === \"string\") {\r\n      this.#table = document.querySelector(table);\r\n      if (!this.#table)\r\n        throw new SyntaxError(`Failed to find table using selector ${table}`);\r\n    } else {\r\n      this.#table = table;\r\n    }\r\n\r\n    if (!(this.#table instanceof HTMLTableElement)) {\r\n      throw new TypeError(`Invalid table element type. Must be HTMLTableElement`);\r\n    }\r\n\r\n    if (!Array.isArray(columns)) {\r\n      throw new TypeError(\"columns must be a list of columns\");\r\n    }\r\n\r\n    this.#tokenizer = tokenizer || this.#tokenizer;\r\n\r\n    this.#highlightSearch = highlightSearch;\r\n    this.#extraFields = extraSearchFields || [];\r\n    this.#noDataText = noDataText || \"No records found\";\r\n    this.#noMatchText = noMatchText || \"No matching records found\";\r\n    this.#classes = { ...DEFAULT_CLASSES, ...classes };\r\n\r\n    this.#rowFormatter = formatter;\r\n\r\n    this.#table.classList.add(\"data-table\");\r\n\r\n    // Inner element that handles the virtual scroll.\r\n    this.#scroller = document.createElement(\"div\");\r\n    this.#scroller.classList.add(...classesToArray(this.#classes.scroller));\r\n    this.#scroller.style.overflow = \"auto\";\r\n    this.#scroller.style.height = \"100%\";\r\n\r\n    // If the user tries to provide a height, we will use that for the scroller.\r\n    if (this.#table.style.height !== \"\") {\r\n      this.#scroller.style.height = this.#table.style.height;\r\n      this.#table.style.height = \"\";\r\n    }\r\n\r\n    // Add the scroller before the table so when we move the\r\n    // table into the scroller it stays in the same place.\r\n    this.#table.parentElement.insertBefore(this.#scroller, this.#table);\r\n    this.#scroller.append(this.#table);\r\n\r\n    if (this.#table.querySelectorAll(\"thead\").length > 1) {\r\n      console.warn(\"Multiple theads found in table. Using last one.\");\r\n    }\r\n\r\n    if (this.#table.querySelectorAll(\"tbody\").length > 1) {\r\n      console.warn(\"Multiple tbodys found in table. Using first one.\");\r\n    }\r\n\r\n    // Hopefully there isn't more than one header or body\r\n    // but if there is, use the last header and first body\r\n    // since that seems like it would make the most sense.\r\n    this.#thead = this.#table.querySelector(\"thead:last-of-type\");\r\n    this.#tbody = this.#table.querySelector(\"tbody:first-of-type\");\r\n\r\n    // Create the thead if there isn't one\r\n    if (!this.#thead) {\r\n      this.#thead = document.createElement(\"thead\");\r\n      this.#table.insertBefore(this.#thead, this.#tbody);\r\n    }\r\n\r\n    this.#thead.classList.add(...classesToArray(this.#classes.thead));\r\n\r\n    // Create the row for the thead if there isn't one\r\n    let headerRow = this.#thead.querySelector(\"tr:last-of-type\");\r\n    if (!headerRow) {\r\n      headerRow = document.createElement(\"tr\");\r\n      this.#thead.append(headerRow);\r\n    }\r\n\r\n    headerRow.classList.add(...classesToArray(this.#classes.tr));\r\n\r\n    // Create the tbody if it doesn't exists\r\n    if (!this.#tbody) {\r\n      this.#tbody = document.createElement(\"tbody\");\r\n      this.#table.append(this.#tbody);\r\n    }\r\n\r\n    this.#tbody.classList.add(...classesToArray(this.#classes.tbody));\r\n\r\n    this.#tbody.addEventListener(\"click\", (event) => {\r\n      let tr, td, field;\r\n      if (event.target instanceof HTMLTableCellElement) {\r\n        td = event.target;\r\n        tr = td.parentElement;\r\n        field = td.dataset.dtField;\r\n      } else if (event.target instanceof HTMLTableRowElement) {\r\n        tr = event.target;\r\n      }\r\n\r\n      if (tr) {\r\n        const index = parseInt(tr.dataset.dtIndex);\r\n        if (!isNaN(index)) {\r\n          const row = this.#filteredRows[index];\r\n\r\n          const event = new CustomEvent(DataTable.Events.ROW_CLICK, {\r\n            detail: {\r\n              row: row,\r\n              index: index,\r\n              field: field,\r\n            },\r\n            bubbles: true,\r\n            cancelable: true,\r\n          });\r\n          tr.dispatchEvent(event);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Initialize columns from argument\r\n    for (const col of columns) {\r\n      let th = this.#thead.querySelector(`th[data-dt-field=\"${col.field}\"]`);\r\n      if (!th) {\r\n        th = document.createElement(\"th\");\r\n        th.classList.add(...classesToArray(this.#classes.th));\r\n        th.dataset.dtField = col.field;\r\n        th.innerText = col.title;\r\n        headerRow.append(th);\r\n      } else {\r\n        col.title = th.innerText;\r\n      }\r\n\r\n      col.element = th;\r\n      col.visible = col.visible === undefined ? true : col.visible;\r\n      this.#columns[col.field] = col;\r\n    }\r\n\r\n    // See if user provided columns in thead.\r\n    for (const th of this.#thead.querySelectorAll(\"th[data-dt-field]\")) {\r\n      const field = th.dataset.dtField;\r\n      // Columns passed as argument take precedence.\r\n      if (!(field in this.#columns)) {\r\n        this.#columns[field] = {\r\n          field: field,\r\n          title: th.innerText,\r\n          element: th,\r\n          sortable: th.dataset.sortable === \"true\",\r\n          searchable: th.dataset.searchable === \"true\",\r\n          visible: th.dataset.visible !== \"false\",\r\n        };\r\n      }\r\n    }\r\n\r\n    let colVisible = false;\r\n    for (const field of Object.keys(this.#columns)) {\r\n      const col = this.#getColumn(field);\r\n\r\n      if (!col.title) {\r\n        col.title = toHumanReadable(field);\r\n      }\r\n\r\n      const th = col.element;\r\n      const nameElement = document.createElement(\"div\");\r\n      nameElement.classList.add(\"dt-header-name\");\r\n      nameElement.innerText = col.title;\r\n      th.innerHTML = '';\r\n      th.append(nameElement);\r\n\r\n      // We need at least one column visible\r\n      if (col.visible) {\r\n        colVisible = true;\r\n      } else {\r\n        th.hidden = true;\r\n      }\r\n\r\n      if (col.sortable) {\r\n        th.classList.add(\"dt-sortable\");\r\n        // Add the event listener to the name element\r\n        // to prevent clicking on the resizer from sorting.\r\n        nameElement.addEventListener(\"click\", () => {\r\n          if (!col.sortOrder) {\r\n            this.sort(field, \"asc\");\r\n          } else if (col.sortOrder === \"asc\") {\r\n            this.sort(field, \"desc\");\r\n          } else if (col.sortOrder) {\r\n            this.sort(field, null);\r\n          }\r\n        });\r\n      }\r\n\r\n      const enableResize = col.resizable === undefined ? resizable : col.resizable;\r\n\r\n      if (enableResize) {\r\n        const resizer = document.createElement(\"div\");\r\n        resizer.classList.add(\"dt-resizer\");\r\n        resizer.addEventListener(\"mousedown\", this.#resizeColumnStart);\r\n        resizer.addEventListener(\"dblclick\", this.#resizeColumnDoubleClick);\r\n        th.append(resizer);\r\n      }\r\n\r\n      if (typeof col.width === \"number\") {\r\n        th.style.width = col.width + \"px\";\r\n      }\r\n\r\n      if (rearrangeable) {\r\n        th.draggable = true;\r\n        th.addEventListener(\"dragstart\", this.#dragColumnStart);\r\n        th.addEventListener(\"dragenter\", this.#dragColumnEnter);\r\n        th.addEventListener(\"dragover\", this.#dragColumnOver);\r\n        th.addEventListener(\"dragleave\", this.#dragColumnLeave);\r\n        th.addEventListener(\"drop\", this.#dragColumnDrop);\r\n        th.addEventListener(\"dragend\", this.#dragColumnEnd);\r\n      }\r\n    }\r\n\r\n    if (this.#columns.length === 0) {\r\n      console.warn(\"No columns found. At least one column is required.\");\r\n    } else if (!colVisible) {\r\n      console.warn(\"At least a single column must be visible. Showing the first column.\");\r\n      this.showColumn(this.columns[0].field);\r\n    }\r\n\r\n    this.#virtualScroll = new VirtualScroll({\r\n      container: this.#scroller,\r\n      element: this.#tbody,\r\n      generator: (index) => this.#createRow(index),\r\n      rows: this.#filteredRows,\r\n    });\r\n\r\n    this.virtualScroll = virtualScroll;\r\n    this.loadData(data);\r\n  }\r\n\r\n  /** @returns {ColumnOptions[]} */\r\n  get columns() {\r\n    return Object.values(this.#columns);\r\n  }\r\n\r\n  get rows() {\r\n    return this.#filteredRows;\r\n  }\r\n\r\n  /**\r\n   * Get total row count of visible data.\r\n   * @returns {number}\r\n   */\r\n  get length() {\r\n    return this.#filteredRows ? this.#filteredRows.length : 0;\r\n  }\r\n\r\n  /**@returns {HTMLTableElement} */\r\n  get table() {\r\n    return this.#table;\r\n  }\r\n\r\n  /** @returns {number | boolean} */\r\n  get virtualScroll() {\r\n    if (this.#virtualScrollCount === Number.MAX_VALUE) {\r\n      return true;\r\n    } else if (this.#virtualScrollCount === 0) {\r\n      return false;\r\n    }\r\n    return this.#virtualScrollCount;\r\n  }\r\n\r\n  set virtualScroll(value) {\r\n    if (typeof value === \"number\") {\r\n      this.#virtualScrollCount = value;\r\n    } else if (value) {\r\n      this.#virtualScrollCount = 0;\r\n    } else {\r\n      this.#virtualScrollCount = Number.MAX_VALUE;\r\n    }\r\n    this.#updateTable();\r\n  }\r\n\r\n  /**\r\n   * Get the current virtual scroll status.\r\n   * @returns {boolean}\r\n   */\r\n  get virtualScrollStatus() {\r\n    return this.#virtualScroll.started;\r\n  }\r\n\r\n  /**\r\n   * Loads the given rows into the table.\r\n   * This will overwrite any already existing rows.\r\n   *\r\n   * @param {object[]} rows\r\n   */\r\n  loadData(rows) {\r\n    if (Array.isArray(rows) && rows.length > 0) {\r\n      let index = 0;\r\n\r\n      for (const originalRow of rows) {\r\n        // Add the index\r\n        originalRow[INDEX_COL_FIELD] = index++;\r\n        for (const col of this.columns) {\r\n          const field = col.field;\r\n          const value = this.#getNestedValue(originalRow, field);\r\n\r\n          // Cache precomputed values for sorting\r\n          if (typeof col.sortValue === \"function\") {\r\n            originalRow[`_${field}_sort`] = col.sortValue(value, originalRow);\r\n          } else if (typeof value === \"string\") {\r\n            originalRow[`_${field}_sort`] = value.toLocaleLowerCase();\r\n          } else {\r\n            originalRow[`_${field}_sort`] = value;\r\n          }\r\n\r\n          // Tokenize any searchable columns\r\n          if (col.searchable && col.tokenize && value) {\r\n            originalRow[`_${field}_tokens`] = this.#tokenizer(value);\r\n          }\r\n        }\r\n      }\r\n      this.#rows = rows;\r\n      this.#filteredRows = rows;\r\n    } else {\r\n      this.#rows = [];\r\n      this.#filteredRows = [];\r\n    }\r\n\r\n    this.#updateHeaders();\r\n    this.#filterRows();\r\n  }\r\n\r\n  showMessage(text, classes) {\r\n    if (Array.isArray(classes)) {\r\n      tr.className = classes.join(\" \");\r\n    } else if (typeof classes !== \"string\") {\r\n      classes = \"\";\r\n    }\r\n\r\n    const colSpan = Object.keys(this.#columns).length;\r\n    this.#tbody.innerHTML = `<tr class=\"${classes}\"><td colSpan=${colSpan}>${text}</td></tr>`;\r\n  }\r\n\r\n  /**\r\n   * Search the table using the given string or regular expression\r\n   * @param {string | RegExp} query\r\n   */\r\n  search(query) {\r\n    this.#query = query !== \"\" ? query : null;\r\n    this.#filterRows();\r\n  }\r\n\r\n  /**\r\n   * Apply the given filters to the table.\r\n   * Filters should be an object with keys for any columns\r\n   * to be filtered and values to match against the underlying data.\r\n   * E.g. {quantity: 1} will only show rows where the quantity column = 1\r\n   * Can also be a function that will be called for each row.\r\n   * @param {object | FilterRowCallback} filters\r\n   */\r\n  filter(filters) {\r\n    if (typeof filters !== \"object\" && typeof filters !== \"function\") {\r\n      throw new TypeError(\"filters must be object or function\");\r\n    }\r\n    this.#filters = filters;\r\n    this.#filterRows();\r\n  }\r\n\r\n  /**\r\n   * Sort the given column using the given order (asc or desc).\r\n   * If order is none, the columns will be \"unsorted\" and revert\r\n   * revert back to sorting the by the index ascending.\r\n   * @param {string} colName\r\n   * @param {string} order\r\n   */\r\n  sort(colName, order) {\r\n    const col = this.#getColumn(colName);\r\n    if (!col) {\r\n      console.warn(`Attempting to sort non-existent column ${colName}`);\r\n      return;\r\n    }\r\n\r\n    if (order != col.sortOrder) {\r\n      if (order === \"asc\" || order === \"desc\") {\r\n        col.sortPriority = this.#sortPriority++;\r\n      } else {\r\n        col.sortPriority = null;\r\n        this.#sortPriority--;\r\n      }\r\n      col.sortOrder = order;\r\n    }\r\n\r\n    this.#updateHeaders();\r\n    this.#sortRows();\r\n\r\n    const event = new CustomEvent(DataTable.Events.COL_SORT, {\r\n      detail: {\r\n        column: col,\r\n        order: col.sortOrder,\r\n      },\r\n      bubbles: true,\r\n      cancelable: true,\r\n    });\r\n\r\n    this.#table.dispatchEvent(event);\r\n  }\r\n\r\n  setColumnVisibility(colName, visisble) {\r\n    const col = this.#getColumn(colName);\r\n    if (!col) {\r\n      console.warn(\r\n        `Attempting to ${visisble ? \"show\" : \"hide\"\r\n        } non-existent column ${colName}`\r\n      );\r\n      return;\r\n    }\r\n\r\n    col.visible = visisble;\r\n    this.#table\r\n      .querySelectorAll(\r\n        `td[data-dt-field=\"${colName}\"], th[data-dt-field=\"${colName}\"]`\r\n      )\r\n      .forEach((element) => (element.hidden = visisble ? false : true));\r\n\r\n    this.#sortRows();\r\n\r\n    const eventName = visisble ? DataTable.Events.COL_SHOW : DataTable.Events.COL_HIDE;\r\n    const event = new CustomEvent(eventName, {\r\n      detail: {\r\n        column: col,\r\n        visible: visisble,\r\n      },\r\n      bubbles: true,\r\n      cancelable: true,\r\n    });\r\n\r\n    this.#table.dispatchEvent(event);\r\n  }\r\n\r\n  showColumn(colName) {\r\n    this.setColumnVisibility(colName, true);\r\n  }\r\n\r\n  hideColumn(colName) {\r\n    this.setColumnVisibility(colName, false);\r\n  }\r\n\r\n  export(name, all = false) {\r\n    const rows = all ? this.#rows : this.#filteredRows;\r\n    if (rows.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const csvHeaders = Object.keys(rows[0]).filter((value) => {\r\n      if (!(value in this.#columns)) {\r\n        return false;\r\n      }\r\n\r\n      return all ? true : this.#columns[value].visible;\r\n    });\r\n\r\n    const csvRows = rows\r\n      .map((row) => {\r\n        const list = [];\r\n        for (let [key, value] of Object.entries(row)) {\r\n          if (key in this.#columns) {\r\n            const col = this.#getColumn(key);\r\n            if (all || col.visible) {\r\n              if (typeof col.valueFormatter === \"function\") {\r\n                value = col.valueFormatter(value, row);\r\n              }\r\n\r\n              if (typeof value !== \"string\") {\r\n                value = value.toString();\r\n              }\r\n\r\n              value.replace('\"', '\"\"');\r\n              list.push(`\"${value}\"`);\r\n            }\r\n          }\r\n        }\r\n        return list.join(\",\");\r\n      })\r\n      .join(\"\\n\");\r\n\r\n    const csvContent = csvHeaders + \"\\n\" + csvRows;\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8,\" });\r\n    const a = document.createElement(\"a\");\r\n    a.style.display = \"none\";\r\n    a.href = URL.createObjectURL(blob);\r\n    a.download = `${name}.csv`;\r\n    document.body.append(a);\r\n    a.click();\r\n    a.remove();\r\n  }\r\n\r\n  scrollTo(index) {\r\n    if (this.#virtualScroll.started) {\r\n      this.#virtualScroll.scrollTo(index);\r\n    }\r\n\r\n    const row = this.#tbody.querySelector(`tr[data-dt-index=\"${index}\"]`);\r\n    if (row) {\r\n      row.scrollIntoView(true);\r\n      const theadHeight = parseFloat(getComputedStyle(this.#thead).height);\r\n      this.#scroller.scrollTop -= theadHeight;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the order of the columns in the table.\r\n   * @param {string[]} fields \r\n   */\r\n  setColumnOrder(fields) {\r\n    if (!Array.isArray(fields)) {\r\n      throw new TypeError(\"fields must be an array of field names\");\r\n    }\r\n\r\n    const columns = Object.values(this.#columns);\r\n    const newColumns = fields.map((field) => this.#getColumn(field))\r\n      .filter((col) => col !== null);\r\n\r\n    this.#columns = Object.fromEntries(newColumns.map((col) => [col.field, col]));\r\n    this.#updateHeaders();\r\n  }\r\n\r\n  refresh() {\r\n    this.#updateHeaders();\r\n    this.#filterRows();\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {any} value\r\n   * @param {RegExp | string} query\r\n   * @returns\r\n   */\r\n  #searchField(value, query) {\r\n    if (Array.isArray(value)) {\r\n      return value.some((element) => this.#searchField(element, query));\r\n    }\r\n\r\n    if (query instanceof RegExp) {\r\n      return query.test(String(value));\r\n    }\r\n\r\n    return String(value).toLocaleLowerCase().includes(query);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {any} value \r\n   * @param {any} filter \r\n   * @param {FilterValueCallback} filterFunction \r\n   * @returns {boolean}\r\n   */\r\n  #filterField(value, filter, filterFunction) {\r\n    if (Array.isArray(filter)) {\r\n      // If it's an array, we will use an OR filter.\r\n      // If any filters in the array match, keep it.\r\n      for (const element of filter) {\r\n        if (this.#filterField(value, element)) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n\r\n    if (typeof filterFunction === \"function\") {\r\n      return filterFunction(value, filter);\r\n    }\r\n\r\n    if (filter instanceof RegExp) {\r\n      return filter.test(String(value));\r\n    }\r\n\r\n    return filter === value;\r\n  }\r\n\r\n  #filterRow(row, index) {\r\n    for (const field of Object.keys(this.#filters || {})) {\r\n      const filter = this.#filters[field];\r\n      const col = this.#getColumn(field);\r\n      const filterCallback = col ? col.filter : null;\r\n      const value = this.#getNestedValue(row, field);\r\n      if (!this.#filterField(value, filter, filterCallback)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  #filterRows() {\r\n    const filter =\r\n      typeof this.#filters === \"function\"\r\n        ? this.#filters\r\n        : (row, index) => this.#filterRow(row, index);\r\n\r\n    let query, queryTokens;\r\n    if (this.#query instanceof RegExp) {\r\n      query = this.#query;\r\n      queryTokens = [query];\r\n    } else if (typeof this.#query === \"string\") {\r\n      query = this.#query.toLocaleLowerCase();\r\n      queryTokens = this.#tokenizer(query);\r\n    }\r\n\r\n    this.#filteredRows = this.#rows.filter((row, index) => {\r\n      row._searchScore = 0;\r\n      // Filter takes precedence over search.\r\n      if (!filter(row, index)) {\r\n        return false;\r\n      }\r\n\r\n      if (!query) {\r\n        return true;\r\n      }\r\n\r\n      const searchableFields = this.columns\r\n        .filter((col) => col.searchable)\r\n        .map((c) => c.field);\r\n\r\n      const fields = [...searchableFields, ...this.#extraFields];\r\n\r\n      for (const field of fields) {\r\n        const col = this.#getColumn(field);\r\n        if (col && col.tokenize) {\r\n          const fieldTokens = row[`_${field}_tokens`] || [];\r\n          for (const token of queryTokens) {\r\n            if (this.#searchField(fieldTokens, token)) {\r\n              if (typeof token === \"string\") {\r\n                row._searchScore += token.length;\r\n              } else {\r\n                row.searchScore++;\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          const value = this.#getNestedValue(row, field);\r\n          if (this.#searchField(value, query)) {\r\n            if (typeof query === \"string\") {\r\n              row._searchScore += query.length;\r\n            } else {\r\n              row._searchScore++;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return row._searchScore > 0;\r\n    });\r\n\r\n    this.#sortRows();\r\n    this.#updateTable();\r\n\r\n    this.#table.dispatchEvent(new CustomEvent(DataTable.Events.ROWS_CHANGED, {\r\n      bubbles: true,\r\n      cancelable: true,\r\n    }));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} a\r\n   * @param {object} b\r\n   * @param {ColumnOptions} col\r\n   * @returns {number}\r\n   */\r\n  #compareRows(a, b, col) {\r\n    let aValue, bValue;\r\n    if (col.sortOrder === \"asc\") {\r\n      aValue = a[`_${col.field}_sort`]\r\n      bValue = b[`_${col.field}_sort`]\r\n    } else if (col.sortOrder === \"desc\") {\r\n      aValue = b[`_${col.field}_sort`]\r\n      bValue = a[`_${col.field}_sort`]\r\n    }\r\n\r\n    if (typeof col.sorter === \"function\") {\r\n      const ret = col.sorter(aValue, bValue);\r\n      if (ret !== 0) return ret;\r\n    }\r\n\r\n    if (aValue < bValue) return -1;\r\n    if (aValue > bValue) return 1;\r\n    return 0;\r\n  }\r\n\r\n  #sortRows() {\r\n    const sortedColumns = Object.values(this.#columns)\r\n      // Only sort by visible columns with valid sort priorities\r\n      .filter((col) => col.visible && typeof col.sortPriority === \"number\")\r\n      // Sort our columns by their sort priority.\r\n      // This is how sorting by multiple columns is handled.\r\n      .sort((a, b) => {\r\n        const aPriority =\r\n          typeof a.sortPriority === \"number\" ? a.sortPriority : 0;\r\n        const bPriority =\r\n          typeof b.sortPriority === \"number\" ? b.sortPriority : 0;\r\n        return aPriority - bPriority;\r\n      });\r\n\r\n    this.#filteredRows.sort((a, b) => {\r\n      // Try to sort by search score if there is a query.\r\n      let aValue = a._searchScore || 0;\r\n      let bValue = b._searchScore || 0;\r\n      if (aValue > bValue) return -1;\r\n      if (aValue < bValue) return 1;\r\n\r\n      for (const col of sortedColumns) {\r\n        const comp = this.#compareRows(a, b, col);\r\n        if (comp !== 0) {\r\n          return comp;\r\n        }\r\n      }\r\n\r\n      // Always fall back to the index column\r\n      return a[INDEX_COL_FIELD] - b[INDEX_COL_FIELD];\r\n    });\r\n    this.#updateTable();\r\n  }\r\n\r\n  #updateHeaders() {\r\n    for (const field of Object.keys(this.#columns)) {\r\n      const col = this.#getColumn(field);\r\n      \r\n      // Update the order of headers\r\n      col.element.parentElement.append(col.element);\r\n\r\n      if (col.sortOrder === \"asc\") {\r\n        col.element.classList.add(\"dt-ascending\");\r\n        col.element.classList.remove(\"dt-descending\");\r\n      } else if (col.sortOrder === \"desc\") {\r\n        col.element.classList.add(\"dt-descending\");\r\n        col.element.classList.remove(\"dt-ascending\");\r\n      } else {\r\n        col.element.classList.remove(\"dt-ascending\");\r\n        col.element.classList.remove(\"dt-descending\");\r\n      }\r\n    }\r\n  }\r\n\r\n  #updateTable() {\r\n    this.#tbody.innerHTML = \"\";\r\n    if (this.#filteredRows.length) {\r\n      let virtualScroll = false;\r\n      if (this.#filteredRows.length >= this.#virtualScrollCount) {\r\n        try {\r\n          this.#virtualScroll.rowCount = this.#filteredRows.length;\r\n          this.#virtualScroll.start();\r\n          virtualScroll = true;\r\n        } catch (error) {\r\n          if (error instanceof VirtualScrollError) {\r\n            console.warn(\r\n              \"Failed to start virtual scroll... falling back to standard rendering\"\r\n            );\r\n            console.warn(error.stack);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!virtualScroll) {\r\n        if (!warned && this.#filteredRows.length > WARN_ROW_COUNT) {\r\n          warned = true;\r\n          const count = WARN_ROW_COUNT.toLocaleString();\r\n          console.warn(\r\n            `Virtual scroll disabled with more than ${count} rows... Good luck with that!`\r\n          );\r\n        }\r\n\r\n        if (this.#virtualScroll) {\r\n          this.#virtualScroll.stop();\r\n        }\r\n        const rowElements = this.#filteredRows.map((_, index) => this.#createRow(index));\r\n        this.#tbody.append(...rowElements);\r\n      }\r\n    } else if (this.#rows.length === 0) {\r\n      this.showMessage(this.#noDataText, \"dt-empty\");\r\n    } else {\r\n      this.showMessage(this.#noMatchText, \"dt-empty\");\r\n    }\r\n\r\n    // Set all of the columns widths to their current width except the last one.\r\n    // This makes resizing columns feel a bit more natural.\r\n    // The last column will be set to fill the rest of the space.\r\n    for (let i = 0; i < this.columns.length - 1; ++i) {\r\n      const col = this.columns[i];\r\n      if (col.element.style.width == \"\") {\r\n        col.element.style.width = col.element.offsetWidth + \"px\";\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {HTMLTableCellElement} td \r\n   * @param {any} value \r\n   * @param {ColumnOptions} col \r\n   * @param {object} row \r\n   */\r\n  #updateCell(td, value, col, row) {\r\n    if (typeof col.valueFormatter === \"function\") {\r\n      value = col.valueFormatter(value, row);\r\n    }\r\n    td.innerText = value == null ? \"-\" : value;\r\n\r\n    if (typeof col.elementFormatter === \"function\") {\r\n      col.elementFormatter(value, row, td);\r\n    }\r\n\r\n    if (\r\n      this.#highlightSearch &&\r\n      this.#query &&\r\n      this.#query != \"\" &&\r\n      col.searchable\r\n    ) {\r\n      td.innerHTML = td.innerText.replace(\r\n        new RegExp(this.#query, \"i\"),\r\n        (match) => `<mark>${match}</mark>`\r\n      );\r\n    }\r\n\r\n    td.hidden = col.visible ? false : true;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {number} index\r\n   * @returns {HTMLTableRowElement}\r\n   */\r\n  #createRow(index) {\r\n    const row = this.#filteredRows[index];\r\n    const tr = document.createElement(\"tr\");\r\n    tr.classList.add(...classesToArray(this.#classes.tr));\r\n    tr.dataset.dtIndex = index;\r\n\r\n    for (const field of Object.keys(this.#columns)) {\r\n      let value = this.#getNestedValue(row, field);\r\n      const col = this.#getColumn(field);\r\n      const td = document.createElement(\"td\");\r\n      td.classList.add(...classesToArray(this.#classes.td));\r\n      td.dataset.dtField = field;\r\n      this.#updateCell(td, value, col, row);\r\n      tr.append(td);\r\n    }\r\n\r\n    if (typeof this.#rowFormatter === \"function\") {\r\n      this.#rowFormatter(row, tr);\r\n    }\r\n\r\n    return tr;\r\n  }\r\n\r\n  #getNestedValue(obj, path) {\r\n    const keys = path.split(\".\");\r\n    let current = obj;\r\n\r\n    for (const key of keys) {\r\n      if (current && typeof current === \"object\") {\r\n        current = current[key];\r\n      } else {\r\n        return undefined; // Or handle the error as needed\r\n      }\r\n    }\r\n\r\n    return current;\r\n  }\r\n\r\n  /**\r\n   * Just a convenience function that helps with type hints\r\n   * @param {string} field\r\n   * @returns {ColumnOptions}\r\n   */\r\n  #getColumn(field) {\r\n    return this.#columns[field];\r\n  }\r\n\r\n  #resizeColumnStart = (event) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    const header = event.target.closest(\"th\");\r\n    if (!header) return;\r\n\r\n    const field = header.dataset.dtField;\r\n    const col = this.#getColumn(field);\r\n    if (!col) return;\r\n\r\n    this.#resizingColumn = col;\r\n\r\n    col.startX = event.clientX;\r\n    col.startWidth = header.offsetWidth;\r\n\r\n    document.addEventListener(\"mousemove\", this.#resizeColumnMove);\r\n    document.addEventListener(\"mouseup\", this.#resizeColumnEnd);\r\n  }\r\n\r\n  #resizeColumnMove = (event) => {\r\n    if (!this.#resizingColumn) return;\r\n\r\n    event.preventDefault();\r\n    const newWidth = this.#resizingColumn.startWidth + (event.clientX - this.#resizingColumn.startX);\r\n    this.#resizingColumn.element.style.width = `${newWidth}px`;\r\n  }\r\n\r\n  #resizeColumnEnd = (event) => {\r\n    document.removeEventListener(\"mousemove\", this.#resizeColumnMove);\r\n    document.removeEventListener(\"mouseup\", this.#resizeColumnEnd);\r\n    this.#table.dispatchEvent(new CustomEvent(DataTable.Events.COL_RESIZE, {\r\n      detail: {\r\n        column: this.#resizingColumn,\r\n        width: this.#resizingColumn.element.offsetWidth,\r\n      },\r\n      bubbles: true,\r\n      cancelable: true,\r\n    }));\r\n    this.#resizingColumn = null;\r\n  }\r\n\r\n  #resizeColumnDoubleClick = (event) => {\r\n    const header = event.target.closest(\"th\");\r\n    header.style.width = \"0px\";\r\n  }\r\n\r\n  #dragColumnStart = (event) => {\r\n    const field = event.target.dataset.dtField;\r\n    event.dataTransfer.effectAllowed = \"move\";\r\n    event.dataTransfer.setData(\"text/plain\", field);\r\n  }\r\n\r\n  #dragColumnOver = (event) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = \"move\";\r\n    return false;\r\n  }\r\n\r\n  #dragColumnEnter = (event) => {\r\n    event.target.classList.add(\"dt-drag-over\");\r\n  }\r\n\r\n  #dragColumnLeave = (event) => {\r\n    event.target.classList.remove(\"dt-drag-over\");\r\n  }\r\n\r\n  #dragColumnDrop = (event) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    const dragField = event.dataTransfer.getData(\"text/plain\");\r\n    const dropField = event.currentTarget.dataset.dtField;\r\n\r\n    const columns = Object.values(this.#columns);\r\n    const dragIndex = columns.findIndex((col) => col.field === dragField);\r\n    const dropIndex = columns.findIndex((col) => col.field === dropField);\r\n\r\n    if (dragIndex > -1 && dropIndex > -1) {\r\n      const [draggedColumn] = columns.splice(dragIndex, 1);\r\n      columns.splice(dropIndex, 0, draggedColumn);\r\n\r\n      // Update the #columns object\r\n      this.#columns = Object.fromEntries(columns.map((col) => [col.field, col]));\r\n\r\n      // Clear width of the last column so it can fill the rest of the space.\r\n      const lastCol = columns[columns.length - 1];\r\n      if (lastCol) {\r\n        lastCol.element.style.width = \"\";\r\n      }\r\n\r\n      // Re-render the table\r\n      this.#updateHeaders();\r\n      this.#updateTable();\r\n\r\n      this.#table.dispatchEvent(new CustomEvent(DataTable.Events.COL_REARRANGE, {\r\n        detail: {\r\n          draggedColumn: draggedColumn,\r\n          dropColumn: this.#getColumn(dropField),\r\n          columns: columns,\r\n        },\r\n        bubbles: true,\r\n        cancelable: true,\r\n      }));\r\n    }\r\n  }\r\n\r\n  #dragColumnEnd = (event) => {\r\n    document.querySelectorAll(\".dt-drag-over\").forEach((el) => {\r\n      el.classList.remove(\"dt-drag-over\");\r\n    });\r\n  }\r\n}\r\n\r\nclass VirtualScroll {\r\n  #container;\r\n  #element;\r\n  #generator;\r\n  #rowCount = 0;\r\n  #rowHeight = 0;\r\n  #padding = 2;\r\n  #animationFrame;\r\n  #started = false;\r\n  #scrollTop = 0;\r\n\r\n  /**\r\n   *\r\n   * @param {object} options\r\n   * @param {HTMLElement} options.container\r\n   * @param {HTMLElement} options.element\r\n   * @param {Array<Object>} options.rows\r\n   * @param {function} options.generator\r\n   */\r\n  constructor({ container, element, generator, nodePadding = 2 }) {\r\n    this.#container = container;\r\n    this.#element = element;\r\n    this.#generator = generator;\r\n    this.#padding = nodePadding;\r\n  }\r\n\r\n  get rowCount() {\r\n    return this.#rowCount;\r\n  }\r\n\r\n  set rowCount(count) {\r\n    this.#rowCount = count;\r\n    this.#renderChunk();\r\n  }\r\n\r\n  get rowHeight() {\r\n    if (!this.#rowHeight) {\r\n      this.#updateRowHeight();\r\n    }\r\n    return this.#rowHeight;\r\n  }\r\n\r\n  get started() {\r\n    return this.#started;\r\n  }\r\n\r\n  scrollTo(index) {\r\n    this.#container.scrollTop = this.rowHeight * index;\r\n    this.#renderChunk();\r\n  }\r\n\r\n  #scrollCallback = () => {\r\n    // Only update if we are vertically scrolling.\r\n    // Fixes horizontal scroll bug.\r\n    if (this.#container.scrollTop !== this.#scrollTop) {\r\n      this.#scrollTop = this.#container.scrollTop;\r\n      if (this.#animationFrame) {\r\n        cancelAnimationFrame(this.#animationFrame);\r\n      }\r\n      this.#animationFrame = requestAnimationFrame(() => this.#renderChunk());\r\n    }\r\n  };\r\n\r\n  #renderCallback = () => {\r\n    this.#renderChunk();\r\n  };\r\n\r\n  start() {\r\n    if (this.#started) return;\r\n    this.#started = true;\r\n\r\n    this.#container.addEventListener(\"scroll\", this.#scrollCallback);\r\n    window.addEventListener(\"resize\", this.#renderCallback);\r\n\r\n    this.#renderChunk();\r\n  }\r\n\r\n  stop() {\r\n    if (this.#animationFrame) {\r\n      cancelAnimationFrame(this.#animationFrame);\r\n    }\r\n\r\n    this.#container.removeEventListener(\"scroll\", this.#scrollCallback);\r\n    window.removeEventListener(\"resize\", this.#renderCallback);\r\n    this.#started = false;\r\n  }\r\n\r\n  #renderChunk() {\r\n    const scrollTop = this.#container.scrollTop;\r\n    const rowCount = this.rowCount;\r\n    const rowHeight = this.rowHeight;\r\n    const padding = this.#padding;\r\n    const totalContentHeight = rowHeight * rowCount;\r\n    // Max out the element height so we can get a real height of the container.\r\n    // This fixes an issue when the parent isn't set to grow causing only a\r\n    // small number of rows to render until you scroll.\r\n    this.#element.innerHTML = `<tr style=\"height: ${totalContentHeight}px;\"></tr>`;\r\n    const actualHeight = this.#element.offsetHeight;\r\n    const viewHeight = this.#container.offsetHeight;\r\n\r\n    if (!warned && actualHeight < totalContentHeight.toFixed(0) - 1) {\r\n      warned = true;\r\n      console.error(\"Max element height exceeded. Virtual scroll may not work.\");\r\n    }\r\n\r\n    if (!rowCount || !rowHeight) {\r\n      return;\r\n    }\r\n\r\n    let startNode = Math.floor(scrollTop / rowHeight) - padding;\r\n    startNode = Math.max(0, startNode);\r\n\r\n    let visibleNodesCount = Math.ceil(viewHeight / rowHeight) + 2 * padding;\r\n    visibleNodesCount = Math.min(rowCount - startNode, visibleNodesCount);\r\n\r\n    const offsetY = startNode * rowHeight;\r\n    const remainingHeight =\r\n      totalContentHeight - (offsetY + visibleNodesCount * rowHeight);\r\n\r\n    try {\r\n      this.#element.innerHTML = \"\";\r\n      const visibleChildren = new Array(visibleNodesCount)\r\n        .fill(null)\r\n        .map((_, index) => this.#generator(index + startNode));\r\n      // We create two empty rows. One at the top and one at the bottom.\r\n      // Resize the rows accordingly to move the rendered rows to where we want.\r\n      let topRow = document.createElement(\"tr\");\r\n      let bottomRow = document.createElement(\"tr\");\r\n      topRow.style.height = offsetY + \"px\";\r\n      bottomRow.style.height = remainingHeight + \"px\";\r\n      this.#element.append(topRow);\r\n      this.#element.append(...visibleChildren);\r\n      this.#element.append(bottomRow);\r\n    } catch (e) {\r\n      if (e instanceof RangeError) {\r\n        console.log(e);\r\n      }\r\n    }\r\n  }\r\n\r\n  #updateRowHeight() {\r\n    if (this.#rowCount === 0) {\r\n      this.#rowHeight = 0;\r\n      return;\r\n    }\r\n\r\n    const renderSize = Math.min(1000, this.#rowCount);\r\n    // Create an average row height by rendering the first N rows.\r\n    const elements = [];\r\n    for (let i = 0; i < renderSize; ++i) {\r\n      elements.push(this.#generator(i));\r\n    }\r\n    this.#element.innerHTML = \"\";\r\n    this.#element.append(...elements);\r\n    this.#rowHeight = this.#element.offsetHeight / renderSize;\r\n\r\n    if (this.#rowHeight <= 0) {\r\n      throw new VirtualScrollError(\r\n        \"First 1000 rows had no rendered height. Virtual scroll can't be used.\"\r\n      );\r\n    } else if (this.#rowHeight * this.#rowCount > MAX_ELEMENT_HEIGHT) {\r\n      // This seems to be Chrome's max height of an element based on some random testing.\r\n      console.warn(\r\n        \"Virtual scroll height exceeded maximum known element height.\"\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nclass VirtualScrollError extends Error {\r\n  constructor(message) {\r\n    super(message);\r\n  }\r\n}\r\n\r\nconst classesToArray = (classes) => {\r\n  if (typeof classes === \"string\") {\r\n    return classes.split(\" \");\r\n  } else if (Array.isArray(classes)) {\r\n    return classes;\r\n  } else if (classes == null) {\r\n    return [];\r\n  }\r\n  throw new TypeError(\"classes must be string or array of strings\");\r\n};\r\n\r\n/**\r\n * Converts a string from camelCase or snake_case to a human-readable format.\r\n * @param {string} str - The input string (e.g., \"camelCase\" or \"snake_case\").\r\n * @returns {string} - The human-readable string (e.g., \"Camel Case\" or \"Snake Case\").\r\n */\r\nconst toHumanReadable = (str) => {\r\n  return str\r\n    // Replace underscores with spaces\r\n    .replace(/_/g, \" \")\r\n    // Insert spaces before uppercase letters (for camelCase)\r\n    .replace(/([a-z])([A-Z])/g, \"$1 $2\")\r\n    // Capitalize the first letter of each word\r\n    .replace(/\\b\\w/g, (char) => char.toUpperCase());\r\n}\r\n\r\nlet warned = false;\r\nconst WARN_ROW_COUNT = 10_000;\r\nconst INDEX_COL_FIELD = \"_dt_index\";\r\nconst MAX_ELEMENT_HEIGHT = 33554400;\r\n\r\n/** @type {TableClasses} */\r\nconst DEFAULT_CLASSES = {\r\n  scroller: \"dt-scroller\",\r\n  thead: \"dt-headers\",\r\n};\r\n\r\n/**\r\n * @typedef {object} ColumnOptions\r\n * @property {string} field                       - Field name within the data object. Can be nested.\r\n * @property {string} title                       - Column title to be displayed in the header.\r\n * @property {boolean} sortable                   - If true, the column can be sorted.\r\n * @property {boolean} searchable                 - If true, the column can be searched.\r\n * @property {boolean} tokenize                   - If true, the column will be tokenized for search.\r\n * @property {ValueFormatter} valueFormatter      - Callback used to format the value for display.\r\n * @property {ElementFormatter} elementFormatter  - Callback used to format the element for display.\r\n * @property {function} sorter                    - Function used to sort the column.\r\n * @property {function} sortValue                 - Function used to get the value to sort on. Will be cached on initial data load\r\n * @property {FilterValueCallback} filter         - Function used to filter the column.\r\n * @property {Element} element                    - The header element for the column.\r\n * @property {string} sortOrder                   - The current sort order of the column.\r\n * @property {number} sortPriority                - The sort priority of the column.\r\n * @property {boolean} visible                    - If true, the column is visible.\r\n * @property {boolean} resizable                  - If true, the column can be resized.\r\n * @property {Number} width                       - The initial width of the column in pixels.\r\n */\r\n\r\n/**\r\n * @typedef {object} TableClasses\r\n * @property {string | string[]} scroller\r\n * @property {string | string[]} thead\r\n * @property {string | string[]} tbody\r\n * @property {string | string[]} tfoot\r\n * @property {string | string[]} tr\r\n * @property {string | string[]} th\r\n * @property {string | string[]} td\r\n */\r\n\r\n/**\r\n * @typedef {object} TableOptions\r\n * @property {RowFormatter} formatter             - Callback used to apply any custom formatting to a row.\r\n * @property {ColumnOptions[]} columns            - List of columns to be created. Will be merged with any headers in the DOM that have a matching data-field attribute.\r\n * @property {object[]} data                      - Data to be loaded to the table.\r\n * @property {boolean | number} virtualScroll     - Automatically enables virtual scroll for the given number of rows.\r\n *                                                  If boolean, completely enables or disables it. Defaults to 1000.\r\n * @property {boolean} highlightSearch            - If true, search results will be wrapped in a mark tag.\r\n * @property {boolean} resizable                 - If true, columns can be resized by dragging the header.\r\n * @property {boolean} rearrangeable              - If true, columns can be rearranged by dragging the header.\r\n * @property {string[]} extraSearchFields         - Extra fields in the row to be searched. Used for data that doesn't have a column.\r\n * @property {string} noDataText                  - Text to display if the provided data is empty.\r\n * @property {string} noMatchText                 - Text to display if search / filter result is empty.\r\n * @property {TableClasses} classes               - Classes to be applied to created elements.\r\n * @property {TokenizerFunction} tokenizer        - Function used to tokenize queries and field values.\r\n */\r\n\r\n/**\r\n * @callback RowFormatter\r\n * @param {object} row\r\n * @param {HTMLElement} element\r\n */\r\n\r\n/**\r\n * @callback ValueFormatter\r\n * @param {any} value\r\n * @param {object} row\r\n * @returns {string}\r\n */\r\n\r\n/**\r\n * @callback ElementFormatter\r\n * @param {any} value\r\n * @param {object} row\r\n * @param {HTMLElement} element\r\n */\r\n\r\n/**\r\n * @callback TokenizerFunction\r\n * @param {object} value\r\n * @returns {string[]}\r\n */\r\n\r\n/**\r\n * @callback FilterRowCallback\r\n * @param {object} row - The row to be tested.\r\n * @param {number} index - Index of the given row.\r\n * @returns {boolean} True to keep value, false to filter it out.\r\n */\r\n\r\n/**\r\n * @callback FilterValueCallback\r\n * @param {any} value - The value to be tested.\r\n * @param {any} filter - The filter to be tested against.\r\n * @returns {boolean} True to keep value, false to filter it out.\r\n */","import { DataTable } from \"../datatable.js\";\r\n\r\n/**\r\n * @typedef {object} Options\r\n * @property {string} saveColumnSorting - Whether to save sorting state. Default is true.\r\n * @property {string} saveColumnOrder - Whether to save column order. Default is true.\r\n * @property {string} saveColumnVisibility - Whether to save column visibility. Default is true.\r\n * @property {string} saveColumnWidth - Whether to save column width. Default is true.\r\n */\r\n\r\nexport class LocalStorageAdapter {\r\n    /** @type {DataTable} */\r\n    #dataTable;\r\n    /** @type {string} */\r\n    #storageKey;\r\n    /** @type {Options} */\r\n    #options = {\r\n        saveColumnSorting: true,\r\n        saveColumnVisibility: true,        \r\n        saveColumnWidth: true,\r\n        saveColumnOrder: true,\r\n    }\r\n\r\n    /**\r\n     * @param {DataTable} dataTable - The DataTable instance to monitor.\r\n     * @param {string} storageKey - The key to use for saving the state in localStorage.\r\n     * @param {Options} options - The key to use for saving the state in localStorage.\r\n     */\r\n    constructor(dataTable, storageKey, options = {}) {\r\n        this.#dataTable = dataTable;\r\n        this.#storageKey = storageKey;\r\n        this.#options = { ...this.#options, ...options };\r\n\r\n        // Restore state before adding the listeners.\r\n        this.restoreState();\r\n\r\n        const table = dataTable.table;\r\n\r\n        if (this.#options.saveColumnSorting) {\r\n            table.addEventListener(DataTable.Events.COL_SORT, () => this.saveState());\r\n        }\r\n\r\n        if (this.#options.saveColumnVisibility) {\r\n            table.addEventListener(DataTable.Events.COL_HIDE, () => this.saveState());\r\n            table.addEventListener(DataTable.Events.COL_SHOW, () => this.saveState());\r\n        }\r\n\r\n        if (this.#options.saveColumnWidth) {\r\n            table.addEventListener(DataTable.Events.COL_RESIZE, () => this.saveState());\r\n        }\r\n\r\n        if (this.#options.saveColumnOrder) {\r\n            table.addEventListener(DataTable.Events.COL_REARRANGE, () => this.saveState());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saves the current column state to localStorage.\r\n     */\r\n    saveState() {\r\n        const columnStates = this.#dataTable.columns.map((col) => ({\r\n            field: col.field,\r\n            sortOrder: col.sortOrder,\r\n            sortPriority: col.sortPriority,\r\n            visible: col.visible,\r\n            width: col.element.style.width,\r\n        }));\r\n\r\n        localStorage.setItem(this.#storageKey, JSON.stringify(columnStates));\r\n    }\r\n\r\n    /**\r\n     * Restores the column state from localStorage.\r\n     */\r\n    restoreState() {\r\n        const savedState = localStorage.getItem(this.#storageKey);\r\n        if (!savedState) return;\r\n\r\n        try {\r\n            const columnStates = JSON.parse(savedState);\r\n            const columns = this.#dataTable.columns;\r\n\r\n            columnStates.forEach((savedCol) => {\r\n                const col = columns.find((c) => c.field === savedCol.field);\r\n                if (col) {\r\n                    \r\n                    if (this.#options.saveColumnSorting) {\r\n                        col.sortOrder = savedCol.sortOrder;\r\n                        col.sortPriority = savedCol.sortPriority;\r\n                    }\r\n\r\n                    if (this.#options.saveColumnVisibility) {\r\n                        this.#dataTable.setColumnVisibility(col.field, savedCol.visible);\r\n                    }\r\n\r\n                    if (this.#options.saveColumnWidth) {\r\n                        col.element.style.width = savedCol.width;\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (this.#options.saveColumnOrder) {\r\n                this.#dataTable.setColumnOrder(columnStates.map((col) => col.field));\r\n            }\r\n\r\n            this.#dataTable.refresh();\r\n\r\n        } catch (error) {\r\n            console.error(\"Failed to restore DataTable state:\", error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the saved state from localStorage.\r\n     */\r\n    clearState() {\r\n        localStorage.removeItem(this.#storageKey);\r\n    }\r\n}"],"names":["DataTable","static","ROW_CLICK","ROWS_CHANGED","COL_HIDE","COL_SHOW","COL_SORT","COL_RESIZE","COL_REARRANGE","table","thead","tbody","tfoot","scroller","columns","rows","filteredRows","query","filters","extraFields","rowFormatter","virtualScroll","virtualScrollCount","highlightSearch","tokenizer","value","String","toLowerCase","replace","trim","split","sortPriority","noDataText","noMatchText","classes","resizingColumn","constructor","formatter","data","resizable","rearrangeable","extraSearchFields","this","document","querySelector","SyntaxError","HTMLTableElement","TypeError","Array","isArray","DEFAULT_CLASSES","classList","add","createElement","classesToArray","style","overflow","height","parentElement","insertBefore","append","querySelectorAll","length","console","warn","headerRow","tr","addEventListener","event","td","field","target","HTMLTableCellElement","dataset","dtField","HTMLTableRowElement","index","parseInt","dtIndex","isNaN","row","CustomEvent","Events","detail","bubbles","cancelable","dispatchEvent","col","th","title","innerText","element","visible","undefined","sortable","searchable","colVisible","Object","keys","getColumn","toHumanReadable","nameElement","innerHTML","hidden","sortOrder","sort","resizer","resizeColumnStart","resizeColumnDoubleClick","width","draggable","dragColumnStart","dragColumnEnter","dragColumnOver","dragColumnLeave","dragColumnDrop","dragColumnEnd","showColumn","VirtualScroll","container","generator","createRow","loadData","values","Number","MAX_VALUE","updateTable","virtualScrollStatus","started","originalRow","INDEX_COL_FIELD","getNestedValue","sortValue","toLocaleLowerCase","tokenize","updateHeaders","filterRows","showMessage","text","className","join","colSpan","search","filter","colName","order","sortRows","column","setColumnVisibility","visisble","forEach","eventName","hideColumn","name","all","csvHeaders","csvRows","map","list","key","entries","valueFormatter","toString","push","blob","Blob","type","a","display","href","URL","createObjectURL","download","body","click","remove","scrollTo","scrollIntoView","theadHeight","parseFloat","getComputedStyle","scrollTop","setColumnOrder","fields","newColumns","fromEntries","refresh","searchField","some","RegExp","test","includes","filterField","filterFunction","filterRow","filterCallback","queryTokens","_searchScore","c","fieldTokens","token","searchScore","compareRows","b","aValue","bValue","sorter","ret","sortedColumns","comp","rowCount","start","error","VirtualScrollError","stack","warned","WARN_ROW_COUNT","count","toLocaleString","stop","rowElements","_","i","offsetWidth","updateCell","elementFormatter","match","obj","path","current","preventDefault","stopPropagation","header","closest","startX","clientX","startWidth","resizeColumnMove","resizeColumnEnd","newWidth","removeEventListener","dataTransfer","effectAllowed","setData","dropEffect","dragField","getData","dropField","currentTarget","dragIndex","findIndex","dropIndex","draggedColumn","splice","lastCol","dropColumn","el","rowHeight","padding","animationFrame","nodePadding","renderChunk","updateRowHeight","scrollCallback","cancelAnimationFrame","requestAnimationFrame","renderCallback","window","totalContentHeight","actualHeight","offsetHeight","viewHeight","toFixed","startNode","Math","floor","max","visibleNodesCount","ceil","min","offsetY","remainingHeight","visibleChildren","fill","topRow","bottomRow","e","RangeError","log","renderSize","elements","MAX_ELEMENT_HEIGHT","Error","message","super","str","char","toUpperCase","LocalStorageAdapter","dataTable","storageKey","options","saveColumnSorting","saveColumnVisibility","saveColumnWidth","saveColumnOrder","restoreState","saveState","columnStates","localStorage","setItem","JSON","stringify","savedState","getItem","parse","savedCol","find","clearState","removeItem"],"mappings":"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"}